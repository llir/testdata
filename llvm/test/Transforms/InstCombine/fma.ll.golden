@external = external global i32

declare float @llvm.fma.f32(float, float, float) #1

declare <2 x float> @llvm.fma.v2f32(<2 x float>, <2 x float>, <2 x float>) #1

declare float @llvm.fmuladd.f32(float, float, float) #1

declare float @llvm.fabs.f32(float) #1

define float @fma_fneg_x_fneg_y(float %x, float %y, float %z) {
; <label>:0
	%x.fneg = fsub float -0.0, %x
	%y.fneg = fsub float -0.0, %y
	%fma = call float @llvm.fma.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fma
}

define float @fma_unary_fneg_x_unary_fneg_y(float %x, float %y, float %z) {
; <label>:0
	%x.fneg = fneg float %x
	%y.fneg = fneg float %y
	%fma = call float @llvm.fma.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fma
}

define <2 x float> @fma_fneg_x_fneg_y_vec(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
; <label>:0
	%xn = fsub <2 x float> <float -0.0, float -0.0>, %x
	%yn = fsub <2 x float> <float -0.0, float -0.0>, %y
	%fma = call <2 x float> @llvm.fma.v2f32(<2 x float> %xn, <2 x float> %yn, <2 x float> %z)
	ret <2 x float> %fma
}

define <2 x float> @fma_unary_fneg_x_unary_fneg_y_vec(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
; <label>:0
	%xn = fneg <2 x float> %x
	%yn = fneg <2 x float> %y
	%fma = call <2 x float> @llvm.fma.v2f32(<2 x float> %xn, <2 x float> %yn, <2 x float> %z)
	ret <2 x float> %fma
}

define <2 x float> @fma_fneg_x_fneg_y_vec_undef(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
; <label>:0
	%xn = fsub <2 x float> <float -0.0, float undef>, %x
	%yn = fsub <2 x float> <float undef, float -0.0>, %y
	%fma = call <2 x float> @llvm.fma.v2f32(<2 x float> %xn, <2 x float> %yn, <2 x float> %z)
	ret <2 x float> %fma
}

define float @fma_fneg_x_fneg_y_fast(float %x, float %y, float %z) {
; <label>:0
	%x.fneg = fsub float -0.0, %x
	%y.fneg = fsub float -0.0, %y
	%fma = call fast float @llvm.fma.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fma
}

define float @fma_unary_fneg_x_unary_fneg_y_fast(float %x, float %y, float %z) {
; <label>:0
	%x.fneg = fneg float %x
	%y.fneg = fneg float %y
	%fma = call fast float @llvm.fma.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fma
}

define float @fma_fneg_const_fneg_y(float %y, float %z) {
; <label>:0
	%y.fneg = fsub float -0.0, %y
	%fma = call float @llvm.fma.f32(float fsub (float -0.0, float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %y.fneg, float %z)
	ret float %fma
}

define float @fma_unary_fneg_const_unary_fneg_y(float %y, float %z) {
; <label>:0
	%y.fneg = fneg float %y
	%fma = call float @llvm.fma.f32(float fneg (float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %y.fneg, float %z)
	ret float %fma
}

define float @fma_fneg_x_fneg_const(float %x, float %z) {
; <label>:0
	%x.fneg = fsub float -0.0, %x
	%fma = call float @llvm.fma.f32(float %x.fneg, float fsub (float -0.0, float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %z)
	ret float %fma
}

define float @fma_unary_fneg_x_unary_fneg_const(float %x, float %z) {
; <label>:0
	%x.fneg = fneg float %x
	%fma = call float @llvm.fma.f32(float %x.fneg, float fneg (float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %z)
	ret float %fma
}

define float @fma_fabs_x_fabs_y(float %x, float %y, float %z) {
; <label>:0
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%y.fabs = call float @llvm.fabs.f32(float %y)
	%fma = call float @llvm.fma.f32(float %x.fabs, float %y.fabs, float %z)
	ret float %fma
}

define float @fma_fabs_x_fabs_x(float %x, float %z) {
; <label>:0
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%fma = call float @llvm.fma.f32(float %x.fabs, float %x.fabs, float %z)
	ret float %fma
}

define float @fma_fabs_x_fabs_x_fast(float %x, float %z) {
; <label>:0
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%fma = call fast float @llvm.fma.f32(float %x.fabs, float %x.fabs, float %z)
	ret float %fma
}

define float @fmuladd_fneg_x_fneg_y(float %x, float %y, float %z) {
; <label>:0
	%x.fneg = fsub float -0.0, %x
	%y.fneg = fsub float -0.0, %y
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_unary_fneg_x_unary_fneg_y(float %x, float %y, float %z) {
; <label>:0
	%x.fneg = fneg float %x
	%y.fneg = fneg float %y
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_fneg_x_fneg_y_fast(float %x, float %y, float %z) {
; <label>:0
	%x.fneg = fsub float -0.0, %x
	%y.fneg = fsub float -0.0, %y
	%fmuladd = call fast float @llvm.fmuladd.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_unary_fneg_x_unary_fneg_y_fast(float %x, float %y, float %z) {
; <label>:0
	%x.fneg = fneg float %x
	%y.fneg = fneg float %y
	%fmuladd = call fast float @llvm.fmuladd.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_fneg_const_fneg_y(float %y, float %z) {
; <label>:0
	%y.fneg = fsub float -0.0, %y
	%fmuladd = call float @llvm.fmuladd.f32(float fsub (float -0.0, float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_unary_fneg_const_unary_fneg_y(float %y, float %z) {
; <label>:0
	%y.fneg = fneg float %y
	%fmuladd = call float @llvm.fmuladd.f32(float fneg (float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_fneg_x_fneg_const(float %x, float %z) {
; <label>:0
	%x.fneg = fsub float -0.0, %x
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fneg, float fsub (float -0.0, float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %z)
	ret float %fmuladd
}

define float @fmuladd_unary_fneg_x_unary_fneg_const(float %x, float %z) {
; <label>:0
	%x.fneg = fneg float %x
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fneg, float fneg (float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %z)
	ret float %fmuladd
}

define float @fmuladd_fabs_x_fabs_y(float %x, float %y, float %z) {
; <label>:0
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%y.fabs = call float @llvm.fabs.f32(float %y)
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fabs, float %y.fabs, float %z)
	ret float %fmuladd
}

define float @fmuladd_fabs_x_fabs_x(float %x, float %z) {
; <label>:0
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fabs, float %x.fabs, float %z)
	ret float %fmuladd
}

define float @fmuladd_fabs_x_fabs_x_fast(float %x, float %z) {
; <label>:0
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%fmuladd = call fast float @llvm.fmuladd.f32(float %x.fabs, float %x.fabs, float %z)
	ret float %fmuladd
}

define float @fma_k_y_z(float %y, float %z) {
; <label>:0
	%fma = call float @llvm.fma.f32(float 4.0, float %y, float %z)
	ret float %fma
}

define float @fma_k_y_z_fast(float %y, float %z) {
; <label>:0
	%fma = call fast float @llvm.fma.f32(float 4.0, float %y, float %z)
	ret float %fma
}

define float @fmuladd_k_y_z_fast(float %y, float %z) {
; <label>:0
	%fmuladd = call fast float @llvm.fmuladd.f32(float 4.0, float %y, float %z)
	ret float %fmuladd
}

define float @fma_1_y_z(float %y, float %z) {
; <label>:0
	%fma = call float @llvm.fma.f32(float 1.0, float %y, float %z)
	ret float %fma
}

define float @fma_x_1_z(float %x, float %z) {
; <label>:0
	%fma = call float @llvm.fma.f32(float %x, float 1.0, float %z)
	ret float %fma
}

define <2 x float> @fma_x_1_z_v2f32(<2 x float> %x, <2 x float> %z) {
; <label>:0
	%fma = call <2 x float> @llvm.fma.v2f32(<2 x float> %x, <2 x float> <float 1.0, float 1.0>, <2 x float> %z)
	ret <2 x float> %fma
}

define <2 x float> @fma_x_1_2_z_v2f32(<2 x float> %x, <2 x float> %z) {
; <label>:0
	%fma = call <2 x float> @llvm.fma.v2f32(<2 x float> %x, <2 x float> <float 1.0, float 2.0>, <2 x float> %z)
	ret <2 x float> %fma
}

define float @fma_x_1_z_fast(float %x, float %z) {
; <label>:0
	%fma = call fast float @llvm.fma.f32(float %x, float 1.0, float %z)
	ret float %fma
}

define float @fma_1_1_z(float %z) {
; <label>:0
	%fma = call float @llvm.fma.f32(float 1.0, float 1.0, float %z)
	ret float %fma
}

define float @fmuladd_x_1_z_fast(float %x, float %z) {
; <label>:0
	%fmuladd = call fast float @llvm.fmuladd.f32(float %x, float 1.0, float %z)
	ret float %fmuladd
}

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
