@external = external global i32

declare float @llvm.fma.f32(float %0, float %1, float %2)

declare <2 x float> @llvm.fma.v2f32(<2 x float> %0, <2 x float> %1, <2 x float> %2)

declare <3 x float> @llvm.fma.v3f32(<3 x float> %0, <3 x float> %1, <3 x float> %2)

declare <8 x half> @llvm.fma.v8f16(<8 x half> %0, <8 x half> %1, <8 x half> %2)

declare <2 x double> @llvm.fma.v2f64(<2 x double> %0, <2 x double> %1, <2 x double> %2)

declare float @llvm.fmuladd.f32(float %0, float %1, float %2)

declare <2 x double> @llvm.fmuladd.v2f64(<2 x double> %0, <2 x double> %1, <2 x double> %2)

declare float @llvm.fabs.f32(float %0)

declare <2 x double> @llvm.sqrt.v2f64(<2 x double> %0)

declare void @use_vec(<2 x float> %0)

declare void @use_vec3(<3 x float> %0)

define float @fma_fneg_x_fneg_y(float %x, float %y, float %z) {
0:
	%x.fneg = fsub float -0.0, %x
	%y.fneg = fsub float -0.0, %y
	%fma = call float @llvm.fma.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fma
}

define float @fma_unary_fneg_x_unary_fneg_y(float %x, float %y, float %z) {
0:
	%x.fneg = fneg float %x
	%y.fneg = fneg float %y
	%fma = call float @llvm.fma.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fma
}

define <2 x float> @fma_fneg_x_fneg_y_vec(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
0:
	%xn = fsub <2 x float> <float -0.0, float -0.0>, %x
	%yn = fsub <2 x float> <float -0.0, float -0.0>, %y
	%fma = call <2 x float> @llvm.fma.v2f32(<2 x float> %xn, <2 x float> %yn, <2 x float> %z)
	ret <2 x float> %fma
}

define <2 x float> @fma_unary_fneg_x_unary_fneg_y_vec(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
0:
	%xn = fneg <2 x float> %x
	%yn = fneg <2 x float> %y
	%fma = call <2 x float> @llvm.fma.v2f32(<2 x float> %xn, <2 x float> %yn, <2 x float> %z)
	ret <2 x float> %fma
}

define <2 x float> @fma_fneg_x_fneg_y_vec_undef(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
0:
	%xn = fsub <2 x float> <float -0.0, float undef>, %x
	%yn = fsub <2 x float> <float undef, float -0.0>, %y
	%fma = call <2 x float> @llvm.fma.v2f32(<2 x float> %xn, <2 x float> %yn, <2 x float> %z)
	ret <2 x float> %fma
}

define float @fma_fneg_x_fneg_y_fast(float %x, float %y, float %z) {
0:
	%x.fneg = fsub float -0.0, %x
	%y.fneg = fsub float -0.0, %y
	%fma = call fast float @llvm.fma.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fma
}

define float @fma_unary_fneg_x_unary_fneg_y_fast(float %x, float %y, float %z) {
0:
	%x.fneg = fneg float %x
	%y.fneg = fneg float %y
	%fma = call fast float @llvm.fma.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fma
}

define float @fma_fneg_const_fneg_y(float %y, float %z) {
0:
	%y.fneg = fsub float -0.0, %y
	%fsub = fsub float -0.0, bitcast (i32 ptrtoint (i32* @external to i32) to float)
	%fma = call float @llvm.fma.f32(float %fsub, float %y.fneg, float %z)
	ret float %fma
}

define float @fma_unary_fneg_const_unary_fneg_y(float %y, float %z) {
0:
	%y.fneg = fneg float %y
	%fma = call float @llvm.fma.f32(float fneg (float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %y.fneg, float %z)
	ret float %fma
}

define float @fma_fneg_x_fneg_const(float %x, float %z) {
0:
	%x.fneg = fsub float -0.0, %x
	%fsub = fsub float -0.0, bitcast (i32 ptrtoint (i32* @external to i32) to float)
	%fma = call float @llvm.fma.f32(float %x.fneg, float %fsub, float %z)
	ret float %fma
}

define float @fma_unary_fneg_x_unary_fneg_const(float %x, float %z) {
0:
	%x.fneg = fneg float %x
	%fma = call float @llvm.fma.f32(float %x.fneg, float fneg (float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %z)
	ret float %fma
}

define float @fma_fabs_x_fabs_y(float %x, float %y, float %z) {
0:
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%y.fabs = call float @llvm.fabs.f32(float %y)
	%fma = call float @llvm.fma.f32(float %x.fabs, float %y.fabs, float %z)
	ret float %fma
}

define float @fma_fabs_x_fabs_x(float %x, float %z) {
0:
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%fma = call float @llvm.fma.f32(float %x.fabs, float %x.fabs, float %z)
	ret float %fma
}

define float @fma_fabs_x_fabs_x_fast(float %x, float %z) {
0:
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%fma = call fast float @llvm.fma.f32(float %x.fabs, float %x.fabs, float %z)
	ret float %fma
}

define float @fmuladd_fneg_x_fneg_y(float %x, float %y, float %z) {
0:
	%x.fneg = fsub float -0.0, %x
	%y.fneg = fsub float -0.0, %y
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_unary_fneg_x_unary_fneg_y(float %x, float %y, float %z) {
0:
	%x.fneg = fneg float %x
	%y.fneg = fneg float %y
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_fneg_x_fneg_y_fast(float %x, float %y, float %z) {
0:
	%x.fneg = fsub float -0.0, %x
	%y.fneg = fsub float -0.0, %y
	%fmuladd = call fast float @llvm.fmuladd.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_unary_fneg_x_unary_fneg_y_fast(float %x, float %y, float %z) {
0:
	%x.fneg = fneg float %x
	%y.fneg = fneg float %y
	%fmuladd = call fast float @llvm.fmuladd.f32(float %x.fneg, float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_fneg_const_fneg_y(float %y, float %z) {
0:
	%y.fneg = fsub float -0.0, %y
	%fsub = fsub float -0.0, bitcast (i32 ptrtoint (i32* @external to i32) to float)
	%fmuladd = call float @llvm.fmuladd.f32(float %fsub, float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_unary_fneg_const_unary_fneg_y(float %y, float %z) {
0:
	%y.fneg = fneg float %y
	%fmuladd = call float @llvm.fmuladd.f32(float fneg (float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %y.fneg, float %z)
	ret float %fmuladd
}

define float @fmuladd_fneg_x_fneg_const(float %x, float %z) {
0:
	%x.fneg = fsub float -0.0, %x
	%fsub = fsub float -0.0, bitcast (i32 ptrtoint (i32* @external to i32) to float)
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fneg, float %fsub, float %z)
	ret float %fmuladd
}

define float @fmuladd_unary_fneg_x_unary_fneg_const(float %x, float %z) {
0:
	%x.fneg = fneg float %x
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fneg, float fneg (float bitcast (i32 ptrtoint (i32* @external to i32) to float)), float %z)
	ret float %fmuladd
}

define float @fmuladd_fabs_x_fabs_y(float %x, float %y, float %z) {
0:
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%y.fabs = call float @llvm.fabs.f32(float %y)
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fabs, float %y.fabs, float %z)
	ret float %fmuladd
}

define float @fmuladd_fabs_x_fabs_x(float %x, float %z) {
0:
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%fmuladd = call float @llvm.fmuladd.f32(float %x.fabs, float %x.fabs, float %z)
	ret float %fmuladd
}

define float @fmuladd_fabs_x_fabs_x_fast(float %x, float %z) {
0:
	%x.fabs = call float @llvm.fabs.f32(float %x)
	%fmuladd = call fast float @llvm.fmuladd.f32(float %x.fabs, float %x.fabs, float %z)
	ret float %fmuladd
}

define float @fma_k_y_z(float %y, float %z) {
0:
	%fma = call float @llvm.fma.f32(float 4.0, float %y, float %z)
	ret float %fma
}

define float @fma_k_y_z_fast(float %y, float %z) {
0:
	%fma = call fast float @llvm.fma.f32(float 4.0, float %y, float %z)
	ret float %fma
}

define float @fmuladd_k_y_z_fast(float %y, float %z) {
0:
	%fmuladd = call fast float @llvm.fmuladd.f32(float 4.0, float %y, float %z)
	ret float %fmuladd
}

define float @fma_1_y_z(float %y, float %z) {
0:
	%fma = call float @llvm.fma.f32(float 1.0, float %y, float %z)
	ret float %fma
}

define float @fma_x_1_z(float %x, float %z) {
0:
	%fma = call float @llvm.fma.f32(float %x, float 1.0, float %z)
	ret float %fma
}

define <2 x float> @fma_x_1_z_v2f32(<2 x float> %x, <2 x float> %z) {
0:
	%fma = call <2 x float> @llvm.fma.v2f32(<2 x float> %x, <2 x float> <float 1.0, float 1.0>, <2 x float> %z)
	ret <2 x float> %fma
}

define <2 x float> @fma_x_1_2_z_v2f32(<2 x float> %x, <2 x float> %z) {
0:
	%fma = call <2 x float> @llvm.fma.v2f32(<2 x float> %x, <2 x float> <float 1.0, float 2.0>, <2 x float> %z)
	ret <2 x float> %fma
}

define float @fma_x_1_z_fast(float %x, float %z) {
0:
	%fma = call fast float @llvm.fma.f32(float %x, float 1.0, float %z)
	ret float %fma
}

define float @fma_1_1_z(float %z) {
0:
	%fma = call float @llvm.fma.f32(float 1.0, float 1.0, float %z)
	ret float %fma
}

define float @fma_x_y_0(float %x, float %y) {
0:
	%fma = call float @llvm.fma.f32(float %x, float %y, float 0.0)
	ret float %fma
}

define float @fma_x_y_0_nsz(float %x, float %y) {
0:
	%fma = call nsz float @llvm.fma.f32(float %x, float %y, float 0.0)
	ret float %fma
}

define <8 x half> @fma_x_y_0_v(<8 x half> %x, <8 x half> %y) {
0:
	%fma = call <8 x half> @llvm.fma.v8f16(<8 x half> %x, <8 x half> %y, <8 x half> zeroinitializer)
	ret <8 x half> %fma
}

define <8 x half> @fma_x_y_0_nsz_v(<8 x half> %x, <8 x half> %y) {
0:
	%fma = call nsz <8 x half> @llvm.fma.v8f16(<8 x half> %x, <8 x half> %y, <8 x half> zeroinitializer)
	ret <8 x half> %fma
}

define float @fmuladd_x_y_0(float %x, float %y) {
0:
	%fma = call float @llvm.fmuladd.f32(float %x, float %y, float 0.0)
	ret float %fma
}

define float @fmuladd_x_y_0_nsz(float %x, float %y) {
0:
	%fma = call nsz float @llvm.fmuladd.f32(float %x, float %y, float 0.0)
	ret float %fma
}

define float @fma_x_y_m0(float %x, float %y) {
0:
	%fma = call float @llvm.fma.f32(float %x, float %y, float -0.0)
	ret float %fma
}

define <8 x half> @fma_x_y_m0_v(<8 x half> %x, <8 x half> %y) {
0:
	%fma = call <8 x half> @llvm.fma.v8f16(<8 x half> %x, <8 x half> %y, <8 x half> <half -0.0, half -0.0, half -0.0, half -0.0, half -0.0, half -0.0, half -0.0, half -0.0>)
	ret <8 x half> %fma
}

define float @fmuladd_x_y_m0(float %x, float %y) {
0:
	%fma = call float @llvm.fmuladd.f32(float %x, float %y, float -0.0)
	ret float %fma
}

define float @fmuladd_x_1_z_fast(float %x, float %z) {
0:
	%fmuladd = call fast float @llvm.fmuladd.f32(float %x, float 1.0, float %z)
	ret float %fmuladd
}

define <2 x double> @fmuladd_a_0_b(<2 x double> %a, <2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> zeroinitializer, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_0_a_b(<2 x double> %a, <2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> zeroinitializer, <2 x double> %a, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_a_0_b_missing_flags(<2 x double> %a, <2 x double> %b) {
0:
	%res = call nnan <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> zeroinitializer, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_a_0_b(<2 x double> %a, <2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> %a, <2 x double> zeroinitializer, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_0_a_b(<2 x double> %a, <2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> zeroinitializer, <2 x double> %a, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_0_a_b_missing_flags(<2 x double> %a, <2 x double> %b) {
0:
	%res = call nsz <2 x double> @llvm.fma.v2f64(<2 x double> zeroinitializer, <2 x double> %a, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_sqrt(<2 x double> %a, <2 x double> %b) {
0:
	%sqrt = call fast <2 x double> @llvm.sqrt.v2f64(<2 x double> %a)
	%res = call fast <2 x double> @llvm.fma.v2f64(<2 x double> %sqrt, <2 x double> %sqrt, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_const_fmul(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double 0x4131233302898702, double 0x40C387800000D6C0>, <2 x double> <double 0x3E4BBDDB05A67F53, double 0x3EE321DF92910088>, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_const_fmul_zero(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double 0.0, double 0.0>, <2 x double> <double 0x4131233302898702, double 0x40C387800000D6C0>, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_const_fmul_zero2(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double 0x4131233302898702, double 0x40C387800000D6C0>, <2 x double> <double 0.0, double 0.0>, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_const_fmul_one(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double 1.0, double 1.0>, <2 x double> <double 0x4131233302898702, double 0x40C387800000D6C0>, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_const_fmul_one2(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double 0x4131233302898702, double 0x40C387800000D6C0>, <2 x double> <double 1.0, double 1.0>, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_nan_and_const_0(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> <double 0x3E4BBDDB05A67F53, double 0x3EE321DF92910088>, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_nan_and_const_1(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double 0x3E4BBDDB05A67F53, double 0x3EE321DF92910088>, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fma_nan_and_const_2(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double 0x3E4BBDDB05A67F53, double 0x3EE321DF92910088>, <2 x double> %b, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>)
	ret <2 x double> %res
}

define <2 x double> @fma_undef_0(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double undef, double undef>, <2 x double> %b, <2 x double> %c)
	ret <2 x double> %res
}

define <2 x double> @fma_undef_1(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> %b, <2 x double> <double undef, double undef>, <2 x double> %c)
	ret <2 x double> %res
}

define <2 x double> @fma_undef_2(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> %b, <2 x double> %c, <2 x double> <double undef, double undef>)
	ret <2 x double> %res
}

define <2 x double> @fma_partial_undef_0(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double undef, double 0x4068E00A137F38C5>, <2 x double> %b, <2 x double> %c)
	ret <2 x double> %res
}

define <2 x double> @fma_partial_undef_1(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> %b, <2 x double> <double 0x4068E00A137F38C5, double undef>, <2 x double> %c)
	ret <2 x double> %res
}

define <2 x double> @fma_partial_undef_2(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> %b, <2 x double> %c, <2 x double> <double 0x4068E00A137F38C5, double undef>)
	ret <2 x double> %res
}

define <2 x double> @fma_nan_0(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %b, <2 x double> %c)
	ret <2 x double> %res
}

define <2 x double> @fma_nan_1(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> %b, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %c)
	ret <2 x double> %res
}

define <2 x double> @fma_nan_2(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fma.v2f64(<2 x double> %b, <2 x double> %c, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_const_fmul(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> <double 0x4131233302898702, double 0x40C387800000D6C0>, <2 x double> <double 0x3E4BBDDB05A67F53, double 0x3EE321DF92910088>, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_nan_and_const_0(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> <double 0x3E4BBDDB05A67F53, double 0x3EE321DF92910088>, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_nan_and_const_1(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> <double 0x3E4BBDDB05A67F53, double 0x3EE321DF92910088>, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %b)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_nan_and_const_2(<2 x double> %b) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> <double 0x3E4BBDDB05A67F53, double 0x3EE321DF92910088>, <2 x double> %b, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_nan_0(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %b, <2 x double> %c)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_nan_1(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> %b, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %c)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_undef_0(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> <double undef, double undef>, <2 x double> %b, <2 x double> %c)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_undef_1(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> %b, <2 x double> <double undef, double undef>, <2 x double> %c)
	ret <2 x double> %res
}

define <2 x double> @fmuladd_undef_2(<2 x double> %b, <2 x double> %c) {
0:
	%res = call nnan nsz <2 x double> @llvm.fmuladd.v2f64(<2 x double> %b, <2 x double> %c, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>)
	ret <2 x double> %res
}

define <2 x float> @fma_unary_shuffle_ops(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
0:
	%a = shufflevector <2 x float> %x, <2 x float> poison, <2 x i32> <i32 1, i32 0>
	%b = shufflevector <2 x float> %y, <2 x float> poison, <2 x i32> <i32 1, i32 0>
	%c = shufflevector <2 x float> %z, <2 x float> poison, <2 x i32> <i32 1, i32 0>
	%r = call <2 x float> @llvm.fma.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)
	ret <2 x float> %r
}

define <3 x float> @fma_unary_shuffle_ops_widening(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
0:
	%a = shufflevector <2 x float> %x, <2 x float> poison, <3 x i32> <i32 1, i32 0, i32 1>
	call void @use_vec3(<3 x float> %a)
	%b = shufflevector <2 x float> %y, <2 x float> poison, <3 x i32> <i32 1, i32 0, i32 1>
	%c = shufflevector <2 x float> %z, <2 x float> poison, <3 x i32> <i32 1, i32 0, i32 1>
	%r = call fast <3 x float> @llvm.fma.v3f32(<3 x float> %a, <3 x float> %b, <3 x float> %c)
	ret <3 x float> %r
}

define <2 x float> @fma_unary_shuffle_ops_narrowing(<3 x float> %x, <3 x float> %y, <3 x float> %z) {
0:
	%a = shufflevector <3 x float> %x, <3 x float> poison, <2 x i32> <i32 1, i32 0>
	%b = shufflevector <3 x float> %y, <3 x float> poison, <2 x i32> <i32 1, i32 0>
	call void @use_vec(<2 x float> %b)
	%c = shufflevector <3 x float> %z, <3 x float> poison, <2 x i32> <i32 1, i32 0>
	%r = call nnan nsz <2 x float> @llvm.fma.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)
	ret <2 x float> %r
}

define <2 x float> @fma_unary_shuffle_ops_unshuffled(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
0:
	%a = shufflevector <2 x float> %x, <2 x float> poison, <2 x i32> <i32 1, i32 0>
	%b = shufflevector <2 x float> %y, <2 x float> poison, <2 x i32> <i32 1, i32 0>
	%r = call <2 x float> @llvm.fma.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %z)
	ret <2 x float> %r
}

define <2 x float> @fma_unary_shuffle_ops_wrong_mask(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
0:
	%a = shufflevector <2 x float> %x, <2 x float> poison, <2 x i32> <i32 1, i32 0>
	%b = shufflevector <2 x float> %y, <2 x float> poison, <2 x i32> <i32 0, i32 0>
	%c = shufflevector <2 x float> %z, <2 x float> poison, <2 x i32> <i32 1, i32 0>
	%r = call <2 x float> @llvm.fma.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)
	ret <2 x float> %r
}

define <2 x float> @fma_unary_shuffle_ops_uses(<2 x float> %x, <2 x float> %y, <2 x float> %z) {
0:
	%a = shufflevector <2 x float> %x, <2 x float> poison, <2 x i32> <i32 1, i32 0>
	call void @use_vec(<2 x float> %a)
	%b = shufflevector <2 x float> %y, <2 x float> poison, <2 x i32> <i32 1, i32 0>
	call void @use_vec(<2 x float> %b)
	%c = shufflevector <2 x float> %z, <2 x float> poison, <2 x i32> <i32 1, i32 0>
	call void @use_vec(<2 x float> %c)
	%r = call <2 x float> @llvm.fma.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)
	ret <2 x float> %r
}
