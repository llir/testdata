target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

@GLOBAL = internal global i32 zeroinitializer
@global = external global [0 x i32], align 4

define i32 @test2(float %f) {
0:
	%t5 = fmul float %f, %f
	%t9 = insertelement <4 x float> undef, float %t5, i32 0
	%t10 = insertelement <4 x float> %t9, float 0.0, i32 1
	%t11 = insertelement <4 x float> %t10, float 0.0, i32 2
	%t12 = insertelement <4 x float> %t11, float 0.0, i32 3
	%t19 = bitcast <4 x float> %t12 to <4 x i32>
	%t21 = extractelement <4 x i32> %t19, i32 0
	ret i32 %t21
}

define void @get_image() nounwind {
entry:
	%0 = call i32 @fgetc(i8* null) nounwind
	%1 = trunc i32 %0 to i8
	%t2 = insertelement <100 x i8> zeroinitializer, i8 %1, i32 1
	%t1 = extractelement <100 x i8> %t2, i32 0
	%2 = icmp eq i8 %t1, 80
	br i1 %2, label %bb2, label %bb3

bb2:
	br label %bb3

bb3:
	unreachable
}

define void @vac(<4 x float>* nocapture %a) nounwind {
entry:
	%t1 = load <4 x float>, <4 x float>* %a
	%vecins = insertelement <4 x float> %t1, float 0.0, i32 0
	%vecins4 = insertelement <4 x float> %vecins, float 0.0, i32 1
	%vecins6 = insertelement <4 x float> %vecins4, float 0.0, i32 2
	%vecins8 = insertelement <4 x float> %vecins6, float 0.0, i32 3
	store <4 x float> %vecins8, <4 x float>* %a
	ret void
}

declare i32 @fgetc(i8* %0)

define <4 x float> @dead_shuffle_elt(<4 x float> %x, <2 x float> %y) nounwind {
0:
	%shuffle.i = shufflevector <2 x float> %y, <2 x float> %y, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
	%shuffle9.i = shufflevector <4 x float> %x, <4 x float> %shuffle.i, <4 x i32> <i32 4, i32 5, i32 2, i32 3>
	ret <4 x float> %shuffle9.i
}

define <2 x float> @test_fptrunc(double %f) {
0:
	%t9 = insertelement <4 x double> undef, double %f, i32 0
	%t10 = insertelement <4 x double> %t9, double 0.0, i32 1
	%t11 = insertelement <4 x double> %t10, double 0.0, i32 2
	%t12 = insertelement <4 x double> %t11, double 0.0, i32 3
	%t5 = fptrunc <4 x double> %t12 to <4 x float>
	%ret = shufflevector <4 x float> %t5, <4 x float> undef, <2 x i32> <i32 0, i32 1>
	ret <2 x float> %ret
}

define <2 x double> @test_fpext(float %f) {
0:
	%t9 = insertelement <4 x float> undef, float %f, i32 0
	%t10 = insertelement <4 x float> %t9, float 0.0, i32 1
	%t11 = insertelement <4 x float> %t10, float 0.0, i32 2
	%t12 = insertelement <4 x float> %t11, float 0.0, i32 3
	%t5 = fpext <4 x float> %t12 to <4 x double>
	%ret = shufflevector <4 x double> %t5, <4 x double> undef, <2 x i32> <i32 0, i32 1>
	ret <2 x double> %ret
}

define <4 x double> @test_shuffle(<4 x double> %f) {
0:
	%ret = shufflevector <4 x double> %f, <4 x double> <double undef, double 1.0, double undef, double undef>, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
	ret <4 x double> %ret
}

define <4 x float> @test_select(float %f, float %g) {
0:
	%a0 = insertelement <4 x float> undef, float %f, i32 0
	%a1 = insertelement <4 x float> %a0, float 1.0, i32 1
	%a2 = insertelement <4 x float> %a1, float 2.0, i32 2
	%a3 = insertelement <4 x float> %a2, float 3.0, i32 3
	%b0 = insertelement <4 x float> undef, float %g, i32 0
	%b1 = insertelement <4 x float> %b0, float 4.0, i32 1
	%b2 = insertelement <4 x float> %b1, float 5.0, i32 2
	%b3 = insertelement <4 x float> %b2, float 6.0, i32 3
	%ret = select <4 x i1> <i1 true, i1 false, i1 false, i1 true>, <4 x float> %a3, <4 x float> %b3
	ret <4 x float> %ret
}

define <2 x i64> @PR24922(<2 x i64> %v) {
0:
	%result = select <2 x i1> <i1 icmp eq (i64 extractelement (<2 x i64> bitcast (<4 x i32> <i32 15, i32 15, i32 15, i32 15> to <2 x i64>), i64 0), i64 0), i1 true>, <2 x i64> %v, <2 x i64> zeroinitializer
	ret <2 x i64> %result
}

define <4 x float> @inselt_shuf_no_demand(float %a1, float %a2, float %a3) {
0:
	%out1 = insertelement <4 x float> undef, float %a1, i32 1
	%out12 = insertelement <4 x float> %out1, float %a2, i32 2
	%out123 = insertelement <4 x float> %out12, float %a3, i32 3
	%shuffle = shufflevector <4 x float> %out123, <4 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
	ret <4 x float> %shuffle
}

define <4 x float> @inselt_shuf_no_demand_commute(float %a1, float %a2, float %a3) {
0:
	%out1 = insertelement <4 x float> undef, float %a1, i32 1
	%out12 = insertelement <4 x float> %out1, float %a2, i32 2
	%out123 = insertelement <4 x float> %out12, float %a3, i32 3
	%shuffle = shufflevector <4 x float> undef, <4 x float> %out123, <4 x i32> <i32 4, i32 undef, i32 undef, i32 undef>
	ret <4 x float> %shuffle
}

define <4 x i32> @inselt_shuf_no_demand_multiuse(i32 %a0, i32 %a1, <4 x i32> %b) {
0:
	%out0 = insertelement <4 x i32> undef, i32 %a0, i32 0
	%out01 = insertelement <4 x i32> %out0, i32 %a1, i32 1
	%out012 = insertelement <4 x i32> %out01, i32 %a0, i32 2
	%foo = add <4 x i32> %out012, %b
	%out0123 = insertelement <4 x i32> %foo, i32 %a1, i32 3
	%shuffle = shufflevector <4 x i32> %out0123, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
	ret <4 x i32> %shuffle
}

define <4 x float> @inselt_shuf_no_demand_bogus_insert_index_in_chain(float %a1, float %a2, float %a3, i32 %variable_index) {
0:
	%out1 = insertelement <4 x float> undef, float %a1, i32 1
	%out12 = insertelement <4 x float> %out1, float %a2, i32 %variable_index
	%out123 = insertelement <4 x float> %out12, float %a3, i32 3
	%shuffle = shufflevector <4 x float> %out123, <4 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
	ret <4 x float> %shuffle
}

define <3 x i8> @shuf_add(<3 x i8> %x) {
0:
	%bo = add nsw <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 1, i32 undef, i32 2>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_sub(<3 x i8> %x) {
0:
	%bo = sub nuw <3 x i8> <i8 1, i8 2, i8 3>, %x
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 0, i32 undef, i32 2>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_mul(<3 x i8> %x) {
0:
	%bo = mul nsw <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 0, i32 2, i32 0>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_and(<3 x i8> %x) {
0:
	%bo = and <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 1, i32 1, i32 0>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_or(<3 x i8> %x) {
0:
	%bo = or <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 1, i32 undef, i32 0>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_xor(<3 x i8> %x) {
0:
	%bo = xor <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 2, i32 undef, i32 0>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_lshr_const_op0(<3 x i8> %x) {
0:
	%bo = lshr <3 x i8> <i8 1, i8 2, i8 3>, %x
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 2, i32 1, i32 undef>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_lshr_const_op1(<3 x i8> %x) {
0:
	%bo = lshr exact <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 2, i32 1, i32 undef>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_ashr_const_op0(<3 x i8> %x) {
0:
	%bo = ashr <3 x i8> <i8 1, i8 2, i8 3>, %x
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 0, i32 undef, i32 1>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_ashr_const_op1(<3 x i8> %x) {
0:
	%bo = ashr exact <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 0, i32 undef, i32 1>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_shl_const_op0(<3 x i8> %x) {
0:
	%bo = shl nsw <3 x i8> <i8 1, i8 2, i8 3>, %x
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 2, i32 undef, i32 0>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_shl_const_op1(<3 x i8> %x) {
0:
	%bo = shl nuw <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 2, i32 undef, i32 0>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_sdiv_const_op0(<3 x i8> %x) {
0:
	%bo = sdiv exact <3 x i8> <i8 1, i8 2, i8 3>, %x
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 0, i32 undef, i32 1>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_sdiv_const_op1(<3 x i8> %x) {
0:
	%bo = sdiv <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 1, i32 undef, i32 0>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_srem_const_op0(<3 x i8> %x) {
0:
	%bo = srem <3 x i8> <i8 1, i8 2, i8 3>, %x
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 1, i32 undef, i32 2>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_srem_const_op1(<3 x i8> %x) {
0:
	%bo = srem <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 2, i32 undef, i32 1>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_udiv_const_op0(<3 x i8> %x) {
0:
	%bo = udiv exact <3 x i8> <i8 1, i8 2, i8 3>, %x
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 2, i32 undef, i32 0>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_udiv_const_op1(<3 x i8> %x) {
0:
	%bo = udiv <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 2, i32 undef, i32 0>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_urem_const_op0(<3 x i8> %x) {
0:
	%bo = urem <3 x i8> <i8 1, i8 2, i8 3>, %x
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 2, i32 1, i32 undef>
	ret <3 x i8> %r
}

define <3 x i8> @shuf_urem_const_op1(<3 x i8> %x) {
0:
	%bo = urem <3 x i8> %x, <i8 1, i8 2, i8 3>
	%r = shufflevector <3 x i8> %bo, <3 x i8> undef, <3 x i32> <i32 undef, i32 1, i32 0>
	ret <3 x i8> %r
}

define <3 x float> @shuf_fadd(<3 x float> %x) {
0:
	%bo = fadd <3 x float> %x, <float 1.0, float 2.0, float 3.0>
	%r = shufflevector <3 x float> %bo, <3 x float> undef, <3 x i32> <i32 undef, i32 1, i32 0>
	ret <3 x float> %r
}

define <3 x float> @shuf_fsub(<3 x float> %x) {
0:
	%bo = fsub fast <3 x float> <float 1.0, float 2.0, float 3.0>, %x
	%r = shufflevector <3 x float> %bo, <3 x float> undef, <3 x i32> <i32 undef, i32 0, i32 2>
	ret <3 x float> %r
}

define <3 x float> @shuf_fmul(<3 x float> %x) {
0:
	%bo = fmul reassoc <3 x float> %x, <float 1.0, float 2.0, float 3.0>
	%r = shufflevector <3 x float> %bo, <3 x float> undef, <3 x i32> <i32 undef, i32 1, i32 0>
	ret <3 x float> %r
}

define <3 x float> @shuf_fdiv_const_op0(<3 x float> %x) {
0:
	%bo = fdiv ninf reassoc <3 x float> <float 1.0, float 2.0, float 3.0>, %x
	%r = shufflevector <3 x float> %bo, <3 x float> undef, <3 x i32> <i32 undef, i32 0, i32 2>
	ret <3 x float> %r
}

define <3 x float> @shuf_fdiv_const_op1(<3 x float> %x) {
0:
	%bo = fdiv ninf nnan <3 x float> %x, <float 1.0, float 2.0, float 3.0>
	%r = shufflevector <3 x float> %bo, <3 x float> undef, <3 x i32> <i32 undef, i32 1, i32 0>
	ret <3 x float> %r
}

define <3 x float> @shuf_frem_const_op0(<3 x float> %x) {
0:
	%bo = frem nnan <3 x float> <float 1.0, float 2.0, float 3.0>, %x
	%r = shufflevector <3 x float> %bo, <3 x float> undef, <3 x i32> <i32 undef, i32 2, i32 0>
	ret <3 x float> %r
}

define <3 x float> @shuf_frem_const_op1(<3 x float> %x) {
0:
	%bo = frem ninf reassoc <3 x float> %x, <float 1.0, float 2.0, float 3.0>
	%r = shufflevector <3 x float> %bo, <3 x float> undef, <3 x i32> <i32 1, i32 undef, i32 2>
	ret <3 x float> %r
}

define i32* @gep_vbase_w_s_idx(<2 x i32*> %base) {
0:
	%gep = getelementptr i32, <2 x i32*> %base, i64 1
	%ee = extractelement <2 x i32*> %gep, i32 1
	ret i32* %ee
}

define i32* @gep_splat_base_w_s_idx(i32* %base) {
0:
	%basevec1 = insertelement <2 x i32*> undef, i32* %base, i32 0
	%basevec2 = shufflevector <2 x i32*> %basevec1, <2 x i32*> undef, <2 x i32> zeroinitializer
	%gep = getelementptr i32, <2 x i32*> %basevec2, i64 1
	%ee = extractelement <2 x i32*> %gep, i32 1
	ret i32* %ee
}

define i32* @gep_splat_base_w_cv_idx(i32* %base) {
0:
	%basevec1 = insertelement <2 x i32*> undef, i32* %base, i32 0
	%basevec2 = shufflevector <2 x i32*> %basevec1, <2 x i32*> undef, <2 x i32> zeroinitializer
	%gep = getelementptr i32, <2 x i32*> %basevec2, <2 x i64> <i64 0, i64 1>
	%ee = extractelement <2 x i32*> %gep, i32 1
	ret i32* %ee
}

define i32* @gep_splat_base_w_vidx(i32* %base, <2 x i64> %idxvec) {
0:
	%basevec1 = insertelement <2 x i32*> undef, i32* %base, i32 0
	%basevec2 = shufflevector <2 x i32*> %basevec1, <2 x i32*> undef, <2 x i32> zeroinitializer
	%gep = getelementptr i32, <2 x i32*> %basevec2, <2 x i64> %idxvec
	%ee = extractelement <2 x i32*> %gep, i32 1
	ret i32* %ee
}

define i32* @gep_cvbase_w_s_idx(<2 x i32*> %base, i64 %raw_addr) {
0:
	%gep = getelementptr i32, <2 x i32*> <i32* @GLOBAL, i32* @GLOBAL>, i64 %raw_addr
	%ee = extractelement <2 x i32*> %gep, i32 1
	ret i32* %ee
}

define i32* @gep_cvbase_w_cv_idx(<2 x i32*> %base, i64 %raw_addr) {
0:
	%gep = getelementptr i32, <2 x i32*> <i32* @GLOBAL, i32* @GLOBAL>, <2 x i64> <i64 0, i64 1>
	%ee = extractelement <2 x i32*> %gep, i32 1
	ret i32* %ee
}

define i32* @gep_sbase_w_cv_idx(i32* %base) {
0:
	%gep = getelementptr i32, i32* %base, <2 x i64> <i64 0, i64 1>
	%ee = extractelement <2 x i32*> %gep, i32 1
	ret i32* %ee
}

define i32* @gep_sbase_w_splat_idx(i32* %base, i64 %idx) {
0:
	%idxvec1 = insertelement <2 x i64> undef, i64 %idx, i32 0
	%idxvec2 = shufflevector <2 x i64> %idxvec1, <2 x i64> undef, <2 x i32> zeroinitializer
	%gep = getelementptr i32, i32* %base, <2 x i64> %idxvec2
	%ee = extractelement <2 x i32*> %gep, i32 1
	ret i32* %ee
}

define i32* @gep_splat_both(i32* %base, i64 %idx) {
0:
	%basevec1 = insertelement <2 x i32*> undef, i32* %base, i32 0
	%basevec2 = shufflevector <2 x i32*> %basevec1, <2 x i32*> undef, <2 x i32> zeroinitializer
	%idxvec1 = insertelement <2 x i64> undef, i64 %idx, i32 0
	%idxvec2 = shufflevector <2 x i64> %idxvec1, <2 x i64> undef, <2 x i32> zeroinitializer
	%gep = getelementptr i32, <2 x i32*> %basevec2, <2 x i64> %idxvec2
	%ee = extractelement <2 x i32*> %gep, i32 1
	ret i32* %ee
}

define <2 x i32*> @gep_all_lanes_undef(i32* %base, i64 %idx) {
0:
	%basevec = insertelement <2 x i32*> undef, i32* %base, i32 0
	%idxvec = insertelement <2 x i64> undef, i64 %idx, i32 1
	%gep = getelementptr i32, <2 x i32*> %basevec, <2 x i64> %idxvec
	ret <2 x i32*> %gep
}

define i32* @gep_demanded_lane_undef(i32* %base, i64 %idx) {
0:
	%basevec = insertelement <2 x i32*> undef, i32* %base, i32 0
	%idxvec = insertelement <2 x i64> undef, i64 %idx, i32 1
	%gep = getelementptr i32, <2 x i32*> %basevec, <2 x i64> %idxvec
	%ee = extractelement <2 x i32*> %gep, i32 1
	ret i32* %ee
}

define i32* @PR41624(<2 x { i32, i32 }*> %a) {
0:
	%w = getelementptr { i32, i32 }, <2 x { i32, i32 }*> %a, <2 x i64> <i64 5, i64 5>, <2 x i32> zeroinitializer
	%r = extractelement <2 x i32*> %w, i32 0
	ret i32* %r
}

define i32* @zero_sized_type_extract(<4 x i64> %arg, i64 %arg1) {
bb:
	%t = getelementptr inbounds [0 x i32], <4 x [0 x i32]*> <[0 x i32]* @global, [0 x i32]* @global, [0 x i32]* @global, [0 x i32]* @global>, <4 x i64> zeroinitializer, <4 x i64> %arg
	%t2 = extractelement <4 x i32*> %t, i64 0
	ret i32* %t2
}

define <4 x i8> @select_cond_with_eq_true_false_elts(<4 x i8> %x, <4 x i8> %y, <4 x i1> %cmp) {
0:
	%tval = shufflevector <4 x i8> %x, <4 x i8> %y, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
	%splat = shufflevector <4 x i1> %cmp, <4 x i1> undef, <4 x i32> zeroinitializer
	%r = select <4 x i1> %splat, <4 x i8> %tval, <4 x i8> %y
	ret <4 x i8> %r
}

define <4 x i8> @select_cond_with_eq_true_false_elts2(<4 x i8> %x, <4 x i8> %y, <4 x i1> %cmp) {
0:
	%tval = shufflevector <4 x i8> %x, <4 x i8> %y, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
	%cond = shufflevector <4 x i1> %cmp, <4 x i1> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
	%r = select <4 x i1> %cond, <4 x i8> %tval, <4 x i8> %x
	ret <4 x i8> %r
}

define <4 x float> @select_cond_with_eq_true_false_elts3(<4 x float> %x, <4 x float> %y, <4 x i1> %cmp) {
0:
	%tval = shufflevector <4 x float> %x, <4 x float> %y, <4 x i32> <i32 1, i32 3, i32 5, i32 undef>
	%fval = shufflevector <4 x float> %y, <4 x float> %x, <4 x i32> <i32 0, i32 7, i32 6, i32 undef>
	%cond = shufflevector <4 x i1> %cmp, <4 x i1> undef, <4 x i32> <i32 undef, i32 1, i32 2, i32 3>
	%r = select <4 x i1> %cond, <4 x float> %tval, <4 x float> %fval
	ret <4 x float> %r
}

define <4 x i8> @select_cond_with_undef_true_false_elts(<4 x i8> %x, <4 x i8> %y, <4 x i1> %cmp) {
0:
	%tval = shufflevector <4 x i8> %x, <4 x i8> %y, <4 x i32> <i32 undef, i32 5, i32 6, i32 7>
	%cond = shufflevector <4 x i1> %cmp, <4 x i1> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
	%r = select <4 x i1> %cond, <4 x i8> %tval, <4 x i8> %x
	ret <4 x i8> %r
}

define <4 x i8> @select_cond_(<4 x i8> %x, <4 x i8> %min, <4 x i1> %cmp, i1 %poison_blocker) {
0:
	%ins = insertelement <4 x i1> %cmp, i1 %poison_blocker, i32 0
	%vecins = shufflevector <4 x i8> %x, <4 x i8> %min, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
	%r = select <4 x i1> %ins, <4 x i8> %vecins, <4 x i8> %x
	ret <4 x i8> %r
}

define <4 x float> @ins_of_ext(<4 x float> %x, float %y) {
0:
	%e0 = extractelement <4 x float> %x, i32 0
	%i0 = insertelement <4 x float> undef, float %e0, i32 0
	%i1 = insertelement <4 x float> %i0, float %y, i32 1
	%i2 = insertelement <4 x float> %i1, float %y, i32 2
	%i3 = insertelement <4 x float> %i2, float %y, i32 3
	ret <4 x float> %i3
}

define <4 x float> @ins_of_ext_twice(<4 x float> %x, float %y) {
0:
	%e0 = extractelement <4 x float> %x, i32 0
	%i0 = insertelement <4 x float> undef, float %e0, i32 0
	%e1 = extractelement <4 x float> %x, i32 1
	%i1 = insertelement <4 x float> %i0, float %e1, i32 1
	%i2 = insertelement <4 x float> %i1, float %y, i32 2
	%i3 = insertelement <4 x float> %i2, float %y, i32 3
	ret <4 x float> %i3
}

define <4 x float> @ins_of_ext_wrong_demand(<4 x float> %x, float %y) {
0:
	%e0 = extractelement <4 x float> %x, i32 0
	%i0 = insertelement <4 x float> undef, float %e0, i32 0
	%i1 = insertelement <4 x float> %i0, float %y, i32 1
	%i2 = insertelement <4 x float> %i1, float %y, i32 2
	ret <4 x float> %i2
}

define <4 x float> @ins_of_ext_wrong_type(<5 x float> %x, float %y) {
0:
	%e0 = extractelement <5 x float> %x, i32 0
	%i0 = insertelement <4 x float> undef, float %e0, i32 0
	%i1 = insertelement <4 x float> %i0, float %y, i32 1
	%i2 = insertelement <4 x float> %i1, float %y, i32 2
	%i3 = insertelement <4 x float> %i2, float %y, i32 3
	ret <4 x float> %i3
}

define <4 x i4> @ins_of_ext_undef_elts_propagation(<4 x i4> %v, <4 x i4> %v2, i4 %x) {
0:
	%v0 = extractelement <4 x i4> %v, i32 0
	%t0 = insertelement <4 x i4> undef, i4 %v0, i32 0
	%t2 = insertelement <4 x i4> %t0, i4 %x, i32 2
	%r = shufflevector <4 x i4> %t2, <4 x i4> %v2, <4 x i32> <i32 0, i32 6, i32 2, i32 7>
	ret <4 x i4> %r
}

define <8 x i4> @ins_of_ext_undef_elts_propagation2(<8 x i4> %v, <8 x i4> %v2, i4 %x) {
0:
	%i15 = extractelement <8 x i4> %v, i32 0
	%i16 = insertelement <8 x i4> undef, i4 %i15, i32 0
	%i17 = extractelement <8 x i4> %v, i32 1
	%i18 = insertelement <8 x i4> %i16, i4 %i17, i32 1
	%i19 = insertelement <8 x i4> %i18, i4 %x, i32 2
	%i20 = shufflevector <8 x i4> %i19, <8 x i4> %v2, <8 x i32> <i32 0, i32 1, i32 2, i32 11, i32 10, i32 9, i32 8, i32 undef>
	%i21 = shufflevector <8 x i4> %i20, <8 x i4> %v, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 15>
	ret <8 x i4> %i21
}
