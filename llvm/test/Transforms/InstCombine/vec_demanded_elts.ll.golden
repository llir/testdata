target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

define i32 @test2(float %f) {
; <label>:0
	%tmp5 = fmul float %f, %f
	%tmp9 = insertelement <4 x float> undef, float %tmp5, i32 0
	%tmp10 = insertelement <4 x float> %tmp9, float 0.0, i32 1
	%tmp11 = insertelement <4 x float> %tmp10, float 0.0, i32 2
	%tmp12 = insertelement <4 x float> %tmp11, float 0.0, i32 3
	%tmp19 = bitcast <4 x float> %tmp12 to <4 x i32>
	%tmp21 = extractelement <4 x i32> %tmp19, i32 0
	ret i32 %tmp21
}

define void @get_image() nounwind {
entry:
	%0 = call i32 @fgetc(i8* null) nounwind
	%1 = trunc i32 %0 to i8
	%tmp2 = insertelement <100 x i8> zeroinitializer, i8 %1, i32 1
	%tmp1 = extractelement <100 x i8> %tmp2, i32 0
	%2 = icmp eq i8 %tmp1, 80
	br i1 %2, label %bb2, label %bb3

bb2:
	br label %bb3

bb3:
	unreachable
}

define void @vac(<4 x float>* nocapture %a) nounwind {
entry:
	%tmp1 = load <4 x float>, <4 x float>* %a
	%vecins = insertelement <4 x float> %tmp1, float 0.0, i32 0
	%vecins4 = insertelement <4 x float> %vecins, float 0.0, i32 1
	%vecins6 = insertelement <4 x float> %vecins4, float 0.0, i32 2
	%vecins8 = insertelement <4 x float> %vecins6, float 0.0, i32 3
	store <4 x float> %vecins8, <4 x float>* %a
	ret void
}

declare i32 @fgetc(i8*)

define <4 x float> @dead_shuffle_elt(<4 x float> %x, <2 x float> %y) nounwind {
; <label>:0
	%shuffle.i = shufflevector <2 x float> %y, <2 x float> %y, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
	%shuffle9.i = shufflevector <4 x float> %x, <4 x float> %shuffle.i, <4 x i32> <i32 4, i32 5, i32 2, i32 3>
	ret <4 x float> %shuffle9.i
}

define <2 x float> @test_fptrunc(double %f) {
; <label>:0
	%tmp9 = insertelement <4 x double> undef, double %f, i32 0
	%tmp10 = insertelement <4 x double> %tmp9, double 0.0, i32 1
	%tmp11 = insertelement <4 x double> %tmp10, double 0.0, i32 2
	%tmp12 = insertelement <4 x double> %tmp11, double 0.0, i32 3
	%tmp5 = fptrunc <4 x double> %tmp12 to <4 x float>
	%ret = shufflevector <4 x float> %tmp5, <4 x float> undef, <2 x i32> <i32 0, i32 1>
	ret <2 x float> %ret
}

define <2 x double> @test_fpext(float %f) {
; <label>:0
	%tmp9 = insertelement <4 x float> undef, float %f, i32 0
	%tmp10 = insertelement <4 x float> %tmp9, float 0.0, i32 1
	%tmp11 = insertelement <4 x float> %tmp10, float 0.0, i32 2
	%tmp12 = insertelement <4 x float> %tmp11, float 0.0, i32 3
	%tmp5 = fpext <4 x float> %tmp12 to <4 x double>
	%ret = shufflevector <4 x double> %tmp5, <4 x double> undef, <2 x i32> <i32 0, i32 1>
	ret <2 x double> %ret
}

define <4 x double> @test_shuffle(<4 x double> %f) {
; <label>:0
	%ret = shufflevector <4 x double> %f, <4 x double> <double undef, double 1.0, double undef, double undef>, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
	ret <4 x double> %ret
}

define <4 x float> @test_select(float %f, float %g) {
; <label>:0
	%a0 = insertelement <4 x float> undef, float %f, i32 0
	%a1 = insertelement <4 x float> %a0, float 1.0, i32 1
	%a2 = insertelement <4 x float> %a1, float 2.0, i32 2
	%a3 = insertelement <4 x float> %a2, float 3.0, i32 3
	%b0 = insertelement <4 x float> undef, float %g, i32 0
	%b1 = insertelement <4 x float> %b0, float 4.0, i32 1
	%b2 = insertelement <4 x float> %b1, float 5.0, i32 2
	%b3 = insertelement <4 x float> %b2, float 6.0, i32 3
	%ret = select <4 x i1> <i1 true, i1 false, i1 false, i1 true>, <4 x float> %a3, <4 x float> %b3
	ret <4 x float> %ret
}

define <2 x i64> @PR24922(<2 x i64> %v) {
; <label>:0
	%result = select <2 x i1> <i1 icmp eq (i64 extractelement (<2 x i64> bitcast (<4 x i32> <i32 15, i32 15, i32 15, i32 15> to <2 x i64>), i64 0), i64 0), i1 true>, <2 x i64> %v, <2 x i64> zeroinitializer
	ret <2 x i64> %result
}

define <4 x float> @inselt_shuf_no_demand(float %a1, float %a2, float %a3) {
; <label>:0
	%out1 = insertelement <4 x float> undef, float %a1, i32 1
	%out12 = insertelement <4 x float> %out1, float %a2, i32 2
	%out123 = insertelement <4 x float> %out12, float %a3, i32 3
	%shuffle = shufflevector <4 x float> %out123, <4 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
	ret <4 x float> %shuffle
}

define <4 x float> @inselt_shuf_no_demand_commute(float %a1, float %a2, float %a3) {
; <label>:0
	%out1 = insertelement <4 x float> undef, float %a1, i32 1
	%out12 = insertelement <4 x float> %out1, float %a2, i32 2
	%out123 = insertelement <4 x float> %out12, float %a3, i32 3
	%shuffle = shufflevector <4 x float> undef, <4 x float> %out123, <4 x i32> <i32 4, i32 undef, i32 undef, i32 undef>
	ret <4 x float> %shuffle
}

define <4 x i32> @inselt_shuf_no_demand_multiuse(i32 %a0, i32 %a1, <4 x i32> %b) {
; <label>:0
	%out0 = insertelement <4 x i32> undef, i32 %a0, i32 0
	%out01 = insertelement <4 x i32> %out0, i32 %a1, i32 1
	%out012 = insertelement <4 x i32> %out01, i32 %a0, i32 2
	%foo = add <4 x i32> %out012, %b
	%out0123 = insertelement <4 x i32> %foo, i32 %a1, i32 3
	%shuffle = shufflevector <4 x i32> %out0123, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
	ret <4 x i32> %shuffle
}

define <4 x float> @inselt_shuf_no_demand_bogus_insert_index_in_chain(float %a1, float %a2, float %a3, i32 %variable_index) {
; <label>:0
	%out1 = insertelement <4 x float> undef, float %a1, i32 1
	%out12 = insertelement <4 x float> %out1, float %a2, i32 %variable_index
	%out123 = insertelement <4 x float> %out12, float %a3, i32 3
	%shuffle = shufflevector <4 x float> %out123, <4 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
	ret <4 x float> %shuffle
}
