target datalayout = "p:32:32"

%gept = type { i32, i32 }

@gepy = global %gept zeroinitializer, align 8
@gepz = extern_weak global %gept
@a = common global [1 x i32] zeroinitializer, align 4
@GV = common global i32* null
@y = external global i32

define i1 @ptrtoint() {
; <label>:0
	%a = alloca i8
	%tmp = ptrtoint i8* %a to i32
	%r = icmp eq i32 %tmp, 0
	ret i1 %r
}

define i1 @bitcast() {
; <label>:0
	%a = alloca i32
	%b = alloca i64
	%x = bitcast i32* %a to i8*
	%y = bitcast i64* %b to i8*
	%cmp = icmp eq i8* %x, %y
	ret i1 %cmp
}

define i1 @gep() {
; <label>:0
	%a = alloca [3 x i8], align 8
	%x = getelementptr inbounds [3 x i8], [3 x i8]* %a, i32 0, i32 0
	%cmp = icmp eq i8* %x, null
	ret i1 %cmp
}

define i1 @gep2() {
; <label>:0
	%a = alloca [3 x i8], align 8
	%x = getelementptr inbounds [3 x i8], [3 x i8]* %a, i32 0, i32 0
	%y = getelementptr inbounds [3 x i8], [3 x i8]* %a, i32 0, i32 0
	%cmp = icmp eq i8* %x, %y
	ret i1 %cmp
}

define i1 @gep3() {
; <label>:0
	%x = alloca %gept, align 8
	%a = getelementptr %gept, %gept* %x, i64 0, i32 0
	%b = getelementptr %gept, %gept* %x, i64 0, i32 1
	%equal = icmp eq i32* %a, %b
	ret i1 %equal
}

define i1 @gep4() {
; <label>:0
	%x = alloca %gept, align 8
	%a = getelementptr %gept, %gept* @gepy, i64 0, i32 0
	%b = getelementptr %gept, %gept* @gepy, i64 0, i32 1
	%equal = icmp eq i32* %a, %b
	ret i1 %equal
}

define i1 @PR31262() {
; <label>:0
	%idx = getelementptr inbounds [1 x i32], [1 x i32]* @a, i64 0, i64 undef
	%cmp = icmp uge i32* %idx, getelementptr inbounds ([1 x i32], [1 x i32]* @a, i32 0, i32 0)
	ret i1 %cmp
}

define i1 @gep5() {
; <label>:0
	%x = alloca %gept, align 8
	%a = getelementptr inbounds %gept, %gept* %x, i64 0, i32 1
	%b = getelementptr %gept, %gept* @gepy, i64 0, i32 0
	%equal = icmp eq i32* %a, %b
	ret i1 %equal
}

define i1 @gep6(%gept* %x) {
; <label>:0
	%a = getelementptr %gept, %gept* %x, i64 0, i32 0
	%b = getelementptr %gept, %gept* %x, i64 0, i32 1
	%equal = icmp eq i32* %a, %b
	ret i1 %equal
}

define i1 @gep7(%gept* %x) {
; <label>:0
	%a = getelementptr %gept, %gept* %x, i64 0, i32 0
	%b = getelementptr %gept, %gept* @gepz, i64 0, i32 0
	%equal = icmp eq i32* %a, %b
	ret i1 %equal
}

define i1 @gep8(%gept* %x) {
; <label>:0
	%a = getelementptr %gept, %gept* %x, i32 1
	%b = getelementptr %gept, %gept* %x, i32 -1
	%equal = icmp ugt %gept* %a, %b
	ret i1 %equal
}

define i1 @gep9(i8* %ptr) {
entry:
	%first1 = getelementptr inbounds i8, i8* %ptr, i32 0
	%first2 = getelementptr inbounds i8, i8* %first1, i32 1
	%first3 = getelementptr inbounds i8, i8* %first2, i32 2
	%first4 = getelementptr inbounds i8, i8* %first3, i32 4
	%last1 = getelementptr inbounds i8, i8* %first2, i32 48
	%last2 = getelementptr inbounds i8, i8* %last1, i32 8
	%last3 = getelementptr inbounds i8, i8* %last2, i32 -4
	%last4 = getelementptr inbounds i8, i8* %last3, i32 -4
	%first.int = ptrtoint i8* %first4 to i32
	%last.int = ptrtoint i8* %last4 to i32
	%cmp = icmp ne i32 %last.int, %first.int
	ret i1 %cmp
}

define i1 @gep10(i8* %ptr) {
entry:
	%first1 = getelementptr inbounds i8, i8* %ptr, i32 -2
	%first2 = getelementptr inbounds i8, i8* %first1, i32 44
	%last1 = getelementptr inbounds i8, i8* %ptr, i32 48
	%last2 = getelementptr inbounds i8, i8* %last1, i32 -6
	%first.int = ptrtoint i8* %first2 to i32
	%last.int = ptrtoint i8* %last2 to i32
	%cmp = icmp eq i32 %last.int, %first.int
	ret i1 %cmp
}

define i1 @gep11(i8* %ptr) {
entry:
	%first1 = getelementptr inbounds i8, i8* %ptr, i32 -2
	%last1 = getelementptr inbounds i8, i8* %ptr, i32 48
	%last2 = getelementptr inbounds i8, i8* %last1, i32 -6
	%cmp = icmp ult i8* %first1, %last2
	ret i1 %cmp
}

define i1 @gep12(i8* %ptr) {
entry:
	%first1 = getelementptr inbounds i8, i8* %ptr, i32 -2
	%last1 = getelementptr inbounds i8, i8* %ptr, i32 48
	%last2 = getelementptr inbounds i8, i8* %last1, i32 -6
	%cmp = icmp slt i8* %first1, %last2
	ret i1 %cmp
}

define i1 @gep13(i8* %ptr) {
; <label>:0
	%x = getelementptr inbounds i8, i8* %ptr, i32 1
	%cmp = icmp eq i8* %x, null
	ret i1 %cmp
}

define i1 @gep13_no_null_opt(i8* %ptr) #0 {
; <label>:0
	%x = getelementptr inbounds i8, i8* %ptr, i32 1
	%cmp = icmp eq i8* %x, null
	ret i1 %cmp
}

define i1 @gep14({ {}, i8 }* %ptr) {
; <label>:0
	%x = getelementptr inbounds { {}, i8 }, { {}, i8 }* %ptr, i32 0, i32 1
	%cmp = icmp eq i8* %x, null
	ret i1 %cmp
}

define i1 @gep15({ {}, [4 x { i8, i8 }] }* %ptr, i32 %y) {
; <label>:0
	%x = getelementptr inbounds { {}, [4 x { i8, i8 }] }, { {}, [4 x { i8, i8 }] }* %ptr, i32 0, i32 1, i32 %y, i32 1
	%cmp = icmp eq i8* %x, null
	ret i1 %cmp
}

define i1 @gep15_no_null_opt({ {}, [4 x { i8, i8 }] }* %ptr, i32 %y) #0 {
; <label>:0
	%x = getelementptr inbounds { {}, [4 x { i8, i8 }] }, { {}, [4 x { i8, i8 }] }* %ptr, i32 0, i32 1, i32 %y, i32 1
	%cmp = icmp eq i8* %x, null
	ret i1 %cmp
}

define i1 @gep16(i8* %ptr, i32 %a) {
; <label>:0
	%b = or i32 %a, 1
	%x = getelementptr inbounds i8, i8* %ptr, i32 %b
	%cmp = icmp eq i8* %x, null
	ret i1 %cmp
}

define i1 @gep16_no_null_opt(i8* %ptr, i32 %a) #0 {
; <label>:0
	%b = or i32 %a, 1
	%x = getelementptr inbounds i8, i8* %ptr, i32 %b
	%cmp = icmp eq i8* %x, null
	ret i1 %cmp
}

define i1 @gep17() {
; <label>:0
	%alloca = alloca i32, align 4
	%bc = bitcast i32* %alloca to [4 x i8]*
	%gep1 = getelementptr inbounds i32, i32* %alloca, i32 1
	%pti1 = ptrtoint i32* %gep1 to i32
	%gep2 = getelementptr inbounds [4 x i8], [4 x i8]* %bc, i32 0, i32 1
	%pti2 = ptrtoint i8* %gep2 to i32
	%cmp = icmp ugt i32 %pti1, %pti2
	ret i1 %cmp
}

define i1 @zext(i32 %x) {
; <label>:0
	%e1 = zext i32 %x to i64
	%e2 = zext i32 %x to i64
	%r = icmp eq i64 %e1, %e2
	ret i1 %r
}

define i1 @zext2(i1 %x) {
; <label>:0
	%e = zext i1 %x to i32
	%c = icmp ne i32 %e, 0
	ret i1 %c
}

define i1 @zext3() {
; <label>:0
	%e = zext i1 true to i32
	%c = icmp ne i32 %e, 0
	ret i1 %c
}

define i1 @sext(i32 %x) {
; <label>:0
	%e1 = sext i32 %x to i64
	%e2 = sext i32 %x to i64
	%r = icmp eq i64 %e1, %e2
	ret i1 %r
}

define i1 @sext2(i1 %x) {
; <label>:0
	%e = sext i1 %x to i32
	%c = icmp ne i32 %e, 0
	ret i1 %c
}

define i1 @sext3() {
; <label>:0
	%e = sext i1 true to i32
	%c = icmp ne i32 %e, 0
	ret i1 %c
}

define i1 @add(i32 %x, i32 %y) {
; <label>:0
	%l = lshr i32 %x, 1
	%q = lshr i32 %y, 1
	%r = or i32 %q, 1
	%s = add i32 %l, %r
	%c = icmp eq i32 %s, 0
	ret i1 %c
}

define i1 @add2(i8 %x, i8 %y) {
; <label>:0
	%l = or i8 %x, 128
	%r = or i8 %y, 129
	%s = add i8 %l, %r
	%c = icmp eq i8 %s, 0
	ret i1 %c
}

define i1 @add3(i8 %x, i8 %y) {
; <label>:0
	%l = zext i8 %x to i32
	%r = zext i8 %y to i32
	%s = add i32 %l, %r
	%c = icmp eq i32 %s, 0
	ret i1 %c
}

define i1 @add4(i32 %x, i32 %y) {
; <label>:0
	%z = add nsw i32 %y, 1
	%s1 = add nsw i32 %x, %y
	%s2 = add nsw i32 %x, %z
	%c = icmp slt i32 %s1, %s2
	ret i1 %c
}

define i1 @add5(i32 %x, i32 %y) {
; <label>:0
	%z = add nuw i32 %y, 1
	%s1 = add nuw i32 %x, %z
	%s2 = add nuw i32 %x, %y
	%c = icmp ugt i32 %s1, %s2
	ret i1 %c
}

define i1 @add6(i64 %A, i64 %B) {
; <label>:0
	%s1 = add i64 %A, %B
	%s2 = add i64 %B, %A
	%cmp = icmp eq i64 %s1, %s2
	ret i1 %cmp
}

define i1 @addpowtwo(i32 %x, i32 %y) {
; <label>:0
	%l = lshr i32 %x, 1
	%r = shl i32 1, %y
	%s = add i32 %l, %r
	%c = icmp eq i32 %s, 0
	ret i1 %c
}

define i1 @or(i32 %x) {
; <label>:0
	%o = or i32 %x, 1
	%c = icmp eq i32 %o, 0
	ret i1 %c
}

define i1 @or_constexp(i32 %x) {
entry:
	%0 = and i32 ptrtoint (i32** @GV to i32), 32
	%o = or i32 %x, %0
	%c = icmp eq i32 %o, 0
	ret i1 %c
}

define i1 @shl1(i32 %x) {
; <label>:0
	%s = shl i32 1, %x
	%c = icmp eq i32 %s, 0
	ret i1 %c
}

define i1 @shl3(i32 %X) {
; <label>:0
	%sub = shl nuw i32 4, %X
	%cmp = icmp eq i32 %sub, 31
	ret i1 %cmp
}

define i1 @lshr1(i32 %x) {
; <label>:0
	%s = lshr i32 -1, %x
	%c = icmp eq i32 %s, 0
	ret i1 %c
}

define i1 @lshr3(i32 %x) {
; <label>:0
	%s = lshr i32 %x, %x
	%c = icmp eq i32 %s, 0
	ret i1 %c
}

define i1 @lshr4(i32 %X, i32 %Y) {
; <label>:0
	%A = lshr i32 %X, %Y
	%C = icmp ule i32 %A, %X
	ret i1 %C
}

define i1 @lshr5(i32 %X, i32 %Y) {
; <label>:0
	%A = lshr i32 %X, %Y
	%C = icmp ugt i32 %A, %X
	ret i1 %C
}

define i1 @lshr6(i32 %X, i32 %Y) {
; <label>:0
	%A = lshr i32 %X, %Y
	%C = icmp ult i32 %X, %A
	ret i1 %C
}

define i1 @lshr7(i32 %X, i32 %Y) {
; <label>:0
	%A = lshr i32 %X, %Y
	%C = icmp uge i32 %X, %A
	ret i1 %C
}

define i1 @ashr1(i32 %x) {
; <label>:0
	%s = ashr i32 -1, %x
	%c = icmp eq i32 %s, 0
	ret i1 %c
}

define i1 @ashr3(i32 %x) {
; <label>:0
	%s = ashr i32 %x, %x
	%c = icmp eq i32 %s, 0
	ret i1 %c
}

define i1 @select1(i1 %cond) {
; <label>:0
	%s = select i1 %cond, i32 1, i32 0
	%c = icmp eq i32 %s, 1
	ret i1 %c
}

define i1 @select2(i1 %cond) {
; <label>:0
	%x = zext i1 %cond to i32
	%s = select i1 %cond, i32 %x, i32 0
	%c = icmp ne i32 %s, 0
	ret i1 %c
}

define i1 @select3(i1 %cond) {
; <label>:0
	%x = zext i1 %cond to i32
	%s = select i1 %cond, i32 1, i32 %x
	%c = icmp ne i32 %s, 0
	ret i1 %c
}

define i1 @select4(i1 %cond) {
; <label>:0
	%invert = xor i1 %cond, true
	%s = select i1 %invert, i32 0, i32 1
	%c = icmp ne i32 %s, 0
	ret i1 %c
}

define i1 @select5(i32 %x) {
; <label>:0
	%c = icmp eq i32 %x, 0
	%s = select i1 %c, i32 1, i32 %x
	%c2 = icmp eq i32 %s, 0
	ret i1 %c2
}

define i1 @select6(i32 %x) {
; <label>:0
	%c = icmp sgt i32 %x, 0
	%s = select i1 %c, i32 %x, i32 4
	%c2 = icmp eq i32 %s, 0
	ret i1 %c2
}

define i1 @urem1(i32 %X, i32 %Y) {
; <label>:0
	%A = urem i32 %X, %Y
	%B = icmp ult i32 %A, %Y
	ret i1 %B
}

define i1 @urem2(i32 %X, i32 %Y) {
; <label>:0
	%A = urem i32 %X, %Y
	%B = icmp eq i32 %A, %Y
	ret i1 %B
}

define i1 @urem4(i32 %X) {
; <label>:0
	%A = urem i32 %X, 15
	%B = icmp ult i32 %A, 10
	ret i1 %B
}

define i1 @urem5(i16 %X, i32 %Y) {
; <label>:0
	%A = zext i16 %X to i32
	%B = urem i32 %A, %Y
	%C = icmp slt i32 %B, %Y
	ret i1 %C
}

define i1 @urem6(i32 %X, i32 %Y) {
; <label>:0
	%A = urem i32 %X, %Y
	%B = icmp ugt i32 %Y, %A
	ret i1 %B
}

define i1 @urem7(i32 %X) {
; <label>:0
	%A = urem i32 1, %X
	%B = icmp sgt i32 %A, %X
	ret i1 %B
}

define i1 @srem2(i16 %X, i32 %Y) {
; <label>:0
	%A = zext i16 %X to i32
	%B = add nsw i32 %A, 1
	%C = srem i32 %B, %Y
	%D = icmp slt i32 %C, 0
	ret i1 %D
}

define i1 @srem3(i16 %X, i32 %Y) {
; <label>:0
	%A = zext i16 %X to i32
	%B = or i32 2147483648, %A
	%C = sub nsw i32 1, %B
	%D = srem i32 %C, %Y
	%E = icmp slt i32 %D, 0
	ret i1 %E
}

define i1 @udiv2(i32 %Z) {
; <label>:0
	%A = udiv exact i32 10, %Z
	%B = udiv exact i32 20, %Z
	%C = icmp ult i32 %A, %B
	ret i1 %C
}

define i1 @sdiv_exact_equality(i32 %Z) {
; <label>:0
	%A = sdiv exact i32 10, %Z
	%B = sdiv exact i32 20, %Z
	%C = icmp eq i32 %A, %B
	ret i1 %C
}

define i1 @sdiv_exact_not_equality(i32 %Z) {
; <label>:0
	%A = sdiv exact i32 10, %Z
	%B = sdiv exact i32 20, %Z
	%C = icmp ult i32 %A, %B
	ret i1 %C
}

define i1 @udiv3(i32 %X, i32 %Y) {
; <label>:0
	%A = udiv i32 %X, %Y
	%C = icmp ugt i32 %A, %X
	ret i1 %C
}

define i1 @udiv4(i32 %X, i32 %Y) {
; <label>:0
	%A = udiv i32 %X, %Y
	%C = icmp ule i32 %A, %X
	ret i1 %C
}

define i1 @udiv6(i32 %X) nounwind {
; <label>:0
	%A = udiv i32 1, %X
	%C = icmp eq i32 %A, 0
	ret i1 %C
}

define i1 @udiv7(i32 %X, i32 %Y) {
; <label>:0
	%A = udiv i32 %X, %Y
	%C = icmp ult i32 %X, %A
	ret i1 %C
}

define i1 @udiv8(i32 %X, i32 %Y) {
; <label>:0
	%A = udiv i32 %X, %Y
	%C = icmp uge i32 %X, %A
	ret i1 %C
}

define i1 @mul1(i32 %X) {
; <label>:0
	%Y = or i32 %X, 1
	%M = mul nuw i32 %Y, %Y
	%C = icmp eq i32 %M, 0
	ret i1 %C
}

define i1 @mul2(i32 %X) {
; <label>:0
	%Y = or i32 %X, 1
	%M = mul nsw i32 %Y, %Y
	%C = icmp sgt i32 %M, 0
	ret i1 %C
}

define i1 @mul3(i32 %X, i32 %Y) {
; <label>:0
	%XX = mul nsw i32 %X, %X
	%YY = mul nsw i32 %Y, %Y
	%M = mul nsw i32 %XX, %YY
	%C = icmp sge i32 %M, 0
	ret i1 %C
}

define <2 x i1> @vectorselect1(<2 x i1> %cond) {
; <label>:0
	%invert = xor <2 x i1> %cond, <i1 true, i1 true>
	%s = select <2 x i1> %invert, <2 x i32> <i32 0, i32 0>, <2 x i32> <i32 1, i32 1>
	%c = icmp ne <2 x i32> %s, <i32 0, i32 0>
	ret <2 x i1> %c
}

define <2 x i1> @vectorselectcrash(i32 %arg1) {
; <label>:0
	%tobool40 = icmp ne i32 %arg1, 0
	%cond43 = select i1 %tobool40, <2 x i16> <i16 -5, i16 66>, <2 x i16> <i16 46, i16 1>
	%cmp45 = icmp ugt <2 x i16> %cond43, <i16 73, i16 21>
	ret <2 x i1> %cmp45
}

define i1 @alloca_compare(i64 %idx) {
; <label>:0
	%sv = alloca { i32, i32, [124 x i32] }
	%1 = getelementptr inbounds { i32, i32, [124 x i32] }, { i32, i32, [124 x i32] }* %sv, i32 0, i32 2, i64 %idx
	%2 = icmp eq i32* %1, null
	ret i1 %2
}

define i1 @alloca_compare_no_null_opt(i64 %idx) #0 {
; <label>:0
	%sv = alloca { i32, i32, [124 x i32] }
	%cmp = getelementptr inbounds { i32, i32, [124 x i32] }, { i32, i32, [124 x i32] }* %sv, i32 0, i32 2, i64 %idx
	%X = icmp eq i32* %cmp, null
	ret i1 %X
}

define i1 @infinite_gep() {
; <label>:0
	ret i1 true

unreachableblock:
	%X = getelementptr i32, i32* %X, i32 1
	%Y = icmp eq i32* %X, null
	ret i1 %Y
}

define i1 @alloca_argument_compare(i64* %arg) {
; <label>:0
	%alloc = alloca i64
	%cmp = icmp eq i64* %arg, %alloc
	ret i1 %cmp
}

define i1 @alloca_argument_compare_swapped(i64* %arg) {
; <label>:0
	%alloc = alloca i64
	%cmp = icmp eq i64* %alloc, %arg
	ret i1 %cmp
}

define zeroext i1 @external_compare(i32* noalias %x) {
; <label>:0
	%cmp = icmp eq i32* %x, @y
	ret i1 %cmp
}

define i1 @alloca_gep(i64 %a, i64 %b) {
; <label>:0
	%strs = alloca [1000 x [1001 x i8]], align 16
	%x = getelementptr inbounds [1000 x [1001 x i8]], [1000 x [1001 x i8]]* %strs, i64 0, i64 %a, i64 %b
	%cmp = icmp eq i8* %x, null
	ret i1 %cmp
}

define i1 @alloca_gep_no_null_opt(i64 %a, i64 %b) #0 {
; <label>:0
	%strs = alloca [1000 x [1001 x i8]], align 16
	%x = getelementptr inbounds [1000 x [1001 x i8]], [1000 x [1001 x i8]]* %strs, i64 0, i64 %a, i64 %b
	%cmp = icmp eq i8* %x, null
	ret i1 %cmp
}

define i1 @non_inbounds_gep_compare(i64* %a) {
; <label>:0
	%x = getelementptr i64, i64* %a, i64 42
	%y = getelementptr inbounds i64, i64* %x, i64 -42
	%z = getelementptr i64, i64* %a, i64 -42
	%w = getelementptr inbounds i64, i64* %z, i64 42
	%cmp = icmp eq i64* %y, %w
	ret i1 %cmp
}

define i1 @non_inbounds_gep_compare2(i64* %a) {
; <label>:0
	%x = getelementptr i64, i64* %a, i64 4294967297
	%y = getelementptr i64, i64* %a, i64 1
	%cmp = icmp eq i64* %y, %y
	ret i1 %cmp
}

define i1 @compare_always_true_slt(i16 %a) {
; <label>:0
	%1 = zext i16 %a to i32
	%2 = sub nsw i32 0, %1
	%3 = icmp slt i32 %2, 1
	ret i1 %3
}

define i1 @compare_always_true_sle(i16 %a) {
; <label>:0
	%1 = zext i16 %a to i32
	%2 = sub nsw i32 0, %1
	%3 = icmp sle i32 %2, 0
	ret i1 %3
}

define i1 @compare_always_false_sgt(i16 %a) {
; <label>:0
	%1 = zext i16 %a to i32
	%2 = sub nsw i32 0, %1
	%3 = icmp sgt i32 %2, 0
	ret i1 %3
}

define i1 @compare_always_false_sge(i16 %a) {
; <label>:0
	%1 = zext i16 %a to i32
	%2 = sub nsw i32 0, %1
	%3 = icmp sge i32 %2, 1
	ret i1 %3
}

define i1 @compare_always_false_eq(i16 %a) {
; <label>:0
	%1 = zext i16 %a to i32
	%2 = sub nsw i32 0, %1
	%3 = icmp eq i32 %2, 1
	ret i1 %3
}

define i1 @compare_always_false_ne(i16 %a) {
; <label>:0
	%1 = zext i16 %a to i32
	%2 = sub nsw i32 0, %1
	%3 = icmp ne i32 %2, 1
	ret i1 %3
}

define i1 @lshr_ugt_false(i32 %a) {
; <label>:0
	%shr = lshr i32 1, %a
	%cmp = icmp ugt i32 %shr, 1
	ret i1 %cmp
}

define i1 @nonnull_arg(i32* nonnull %i) {
; <label>:0
	%cmp = icmp eq i32* %i, null
	ret i1 %cmp
}

define i1 @nonnull_arg_no_null_opt(i32* nonnull %i) #0 {
; <label>:0
	%cmp = icmp eq i32* %i, null
	ret i1 %cmp
}

define i1 @nonnull_deref_arg(i32* dereferenceable(4) %i) {
; <label>:0
	%cmp = icmp eq i32* %i, null
	ret i1 %cmp
}

define i1 @nonnull_deref_arg_no_null_opt(i32* dereferenceable(4) %i) #0 {
; <label>:0
	%cmp = icmp eq i32* %i, null
	ret i1 %cmp
}

define i1 @nonnull_deref_as_arg(i32 addrspace(1)* dereferenceable(4) %i) {
; <label>:0
	%cmp = icmp eq i32 addrspace(1)* %i, null
	ret i1 %cmp
}

declare nonnull i32* @returns_nonnull_helper()

define i1 @returns_nonnull() {
; <label>:0
	%call = call nonnull i32* @returns_nonnull_helper()
	%cmp = icmp eq i32* %call, null
	ret i1 %cmp
}

declare dereferenceable(4) i32* @returns_nonnull_deref_helper()

define i1 @returns_nonnull_deref() {
; <label>:0
	%call = call dereferenceable(4) i32* @returns_nonnull_deref_helper()
	%cmp = icmp eq i32* %call, null
	ret i1 %cmp
}

define i1 @returns_nonnull_deref_no_null_opt() #0 {
; <label>:0
	%call = call dereferenceable(4) i32* @returns_nonnull_deref_helper()
	%cmp = icmp eq i32* %call, null
	ret i1 %cmp
}

declare dereferenceable(4) i32 addrspace(1)* @returns_nonnull_deref_as_helper()

define i1 @returns_nonnull_as_deref() {
; <label>:0
	%call = call dereferenceable(4) i32 addrspace(1)* @returns_nonnull_deref_as_helper()
	%cmp = icmp eq i32 addrspace(1)* %call, null
	ret i1 %cmp
}

define i1 @nonnull_load(i32** %addr) {
; <label>:0
	%ptr = load i32*, i32** %addr, !nonnull !{}
	%cmp = icmp eq i32* %ptr, null
	ret i1 %cmp
}

define i1 @nonnull_load_as_outer(i32* addrspace(1)* %addr) {
; <label>:0
	%ptr = load i32*, i32* addrspace(1)* %addr, !nonnull !{}
	%cmp = icmp eq i32* %ptr, null
	ret i1 %cmp
}

define i1 @nonnull_load_as_inner(i32 addrspace(1)** %addr) {
; <label>:0
	%ptr = load i32 addrspace(1)*, i32 addrspace(1)** %addr, !nonnull !{}
	%cmp = icmp eq i32 addrspace(1)* %ptr, null
	ret i1 %cmp
}

define i1 @icmp_eq_const(i32 %a) {
; <label>:0
	%b = mul nsw i32 %a, -2
	%c = icmp eq i32 %b, 1
	ret i1 %c
}

define <2 x i1> @icmp_eq_const_vec(<2 x i32> %a) {
; <label>:0
	%b = mul nsw <2 x i32> %a, <i32 -2, i32 -2>
	%c = icmp eq <2 x i32> %b, <i32 1, i32 1>
	ret <2 x i1> %c
}

define i1 @icmp_ne_const(i32 %a) {
; <label>:0
	%b = mul nsw i32 %a, -2
	%c = icmp ne i32 %b, 1
	ret i1 %c
}

define <2 x i1> @icmp_ne_const_vec(<2 x i32> %a) {
; <label>:0
	%b = mul nsw <2 x i32> %a, <i32 -2, i32 -2>
	%c = icmp ne <2 x i32> %b, <i32 1, i32 1>
	ret <2 x i1> %c
}

define i1 @icmp_sdiv_int_min(i32 %a) {
; <label>:0
	%div = sdiv i32 -2147483648, %a
	%cmp = icmp ne i32 %div, -1073741824
	ret i1 %cmp
}

define i1 @icmp_sdiv_pr20288(i64 %a) {
; <label>:0
	%div = sdiv i64 %a, -8589934592
	%cmp = icmp ne i64 %div, 1073741824
	ret i1 %cmp
}

define i1 @icmp_sdiv_neg1(i64 %a) {
; <label>:0
	%div = sdiv i64 %a, -1
	%cmp = icmp ne i64 %div, 1073741824
	ret i1 %cmp
}

define i1 @icmp_known_bits(i4 %x, i4 %y) {
; <label>:0
	%and1 = and i4 %y, -7
	%and2 = and i4 %x, -7
	%or1 = or i4 %and1, 2
	%or2 = or i4 %and2, 2
	%add = add i4 %or1, %or2
	%cmp = icmp eq i4 %add, 0
	ret i1 %cmp
}

define i1 @icmp_shl_nuw_1(i64 %a) {
; <label>:0
	%shl = shl nuw i64 1, %a
	%cmp = icmp ne i64 %shl, 0
	ret i1 %cmp
}

define i1 @icmp_shl_1_V_ugt_2147483648(i32 %V) {
; <label>:0
	%shl = shl i32 1, %V
	%cmp = icmp ugt i32 %shl, 2147483648
	ret i1 %cmp
}

define i1 @icmp_shl_1_V_ule_2147483648(i32 %V) {
; <label>:0
	%shl = shl i32 1, %V
	%cmp = icmp ule i32 %shl, 2147483648
	ret i1 %cmp
}

define i1 @icmp_shl_1_V_eq_31(i32 %V) {
; <label>:0
	%shl = shl i32 1, %V
	%cmp = icmp eq i32 %shl, 31
	ret i1 %cmp
}

define i1 @icmp_shl_1_V_ne_31(i32 %V) {
; <label>:0
	%shl = shl i32 1, %V
	%cmp = icmp ne i32 %shl, 31
	ret i1 %cmp
}

define i1 @tautological1(i32 %A, i32 %B) {
; <label>:0
	%C = and i32 %A, %B
	%D = icmp ugt i32 %C, %A
	ret i1 %D
}

define i1 @tautological2(i32 %A, i32 %B) {
; <label>:0
	%C = and i32 %A, %B
	%D = icmp ule i32 %C, %A
	ret i1 %D
}

define i1 @tautological3(i32 %A, i32 %B) {
; <label>:0
	%C = or i32 %A, %B
	%D = icmp ule i32 %A, %C
	ret i1 %D
}

define i1 @tautological4(i32 %A, i32 %B) {
; <label>:0
	%C = or i32 %A, %B
	%D = icmp ugt i32 %A, %C
	ret i1 %D
}

define i1 @tautological5(i32 %A, i32 %B) {
; <label>:0
	%C = or i32 %A, %B
	%D = icmp ult i32 %C, %A
	ret i1 %D
}

define i1 @tautological6(i32 %A, i32 %B) {
; <label>:0
	%C = or i32 %A, %B
	%D = icmp uge i32 %C, %A
	ret i1 %D
}

define i1 @tautological7(i32 %A, i32 %B) {
; <label>:0
	%C = and i32 %A, %B
	%D = icmp uge i32 %A, %C
	ret i1 %D
}

define i1 @tautological8(i32 %A, i32 %B) {
; <label>:0
	%C = and i32 %A, %B
	%D = icmp ult i32 %A, %C
	ret i1 %D
}

declare void @helper_i1(i1)

define void @icmp_slt_sge_or(i32 %Ax, i32 %Bx) {
; <label>:0
	%Aneg = or i32 %Ax, 2147483648
	%Apos = and i32 %Ax, 2147483647
	%Bneg = or i32 %Bx, 2147483648
	%Bpos = and i32 %Bx, 2147483647
	%Cpp = or i32 %Apos, %Bpos
	%Dpp = icmp slt i32 %Cpp, %Apos
	%Epp = icmp sge i32 %Cpp, %Apos
	%Fpp = icmp sgt i32 %Apos, %Cpp
	%Gpp = icmp sle i32 %Apos, %Cpp
	%Cpx = or i32 %Apos, %Bx
	%Dpx = icmp slt i32 %Cpx, %Apos
	%Epx = icmp sge i32 %Cpx, %Apos
	%Fpx = icmp sgt i32 %Apos, %Cpx
	%Gpx = icmp sle i32 %Apos, %Cpx
	%Cpn = or i32 %Apos, %Bneg
	%Dpn = icmp slt i32 %Cpn, %Apos
	%Epn = icmp sge i32 %Cpn, %Apos
	%Fpn = icmp sgt i32 %Apos, %Cpn
	%Gpn = icmp sle i32 %Apos, %Cpn
	%Cxp = or i32 %Ax, %Bpos
	%Dxp = icmp slt i32 %Cxp, %Ax
	%Exp = icmp sge i32 %Cxp, %Ax
	%Fxp = icmp sgt i32 %Ax, %Cxp
	%Gxp = icmp sle i32 %Ax, %Cxp
	%Cxx = or i32 %Ax, %Bx
	%Dxx = icmp slt i32 %Cxx, %Ax
	%Exx = icmp sge i32 %Cxx, %Ax
	%Fxx = icmp sgt i32 %Ax, %Cxx
	%Gxx = icmp sle i32 %Ax, %Cxx
	%Cxn = or i32 %Ax, %Bneg
	%Dxn = icmp slt i32 %Cxn, %Ax
	%Exn = icmp sge i32 %Cxn, %Ax
	%Fxn = icmp sgt i32 %Ax, %Cxn
	%Gxn = icmp sle i32 %Ax, %Cxn
	%Cnp = or i32 %Aneg, %Bpos
	%Dnp = icmp slt i32 %Cnp, %Aneg
	%Enp = icmp sge i32 %Cnp, %Aneg
	%Fnp = icmp sgt i32 %Aneg, %Cnp
	%Gnp = icmp sle i32 %Aneg, %Cnp
	%Cnx = or i32 %Aneg, %Bx
	%Dnx = icmp slt i32 %Cnx, %Aneg
	%Enx = icmp sge i32 %Cnx, %Aneg
	%Fnx = icmp sgt i32 %Aneg, %Cnx
	%Gnx = icmp sle i32 %Aneg, %Cnx
	%Cnn = or i32 %Aneg, %Bneg
	%Dnn = icmp slt i32 %Cnn, %Aneg
	%Enn = icmp sge i32 %Cnn, %Aneg
	%Fnn = icmp sgt i32 %Aneg, %Cnn
	%Gnn = icmp sle i32 %Aneg, %Cnn
	call void @helper_i1(i1 %Dpp)
	call void @helper_i1(i1 %Epp)
	call void @helper_i1(i1 %Fpp)
	call void @helper_i1(i1 %Gpp)
	call void @helper_i1(i1 %Dpx)
	call void @helper_i1(i1 %Epx)
	call void @helper_i1(i1 %Fpx)
	call void @helper_i1(i1 %Gpx)
	call void @helper_i1(i1 %Dpn)
	call void @helper_i1(i1 %Epn)
	call void @helper_i1(i1 %Fpn)
	call void @helper_i1(i1 %Gpn)
	call void @helper_i1(i1 %Dxp)
	call void @helper_i1(i1 %Exp)
	call void @helper_i1(i1 %Fxp)
	call void @helper_i1(i1 %Gxp)
	call void @helper_i1(i1 %Dxx)
	call void @helper_i1(i1 %Exx)
	call void @helper_i1(i1 %Fxx)
	call void @helper_i1(i1 %Gxx)
	call void @helper_i1(i1 %Dxn)
	call void @helper_i1(i1 %Exn)
	call void @helper_i1(i1 %Fxn)
	call void @helper_i1(i1 %Gxn)
	call void @helper_i1(i1 %Dnp)
	call void @helper_i1(i1 %Enp)
	call void @helper_i1(i1 %Fnp)
	call void @helper_i1(i1 %Gnp)
	call void @helper_i1(i1 %Dnx)
	call void @helper_i1(i1 %Enx)
	call void @helper_i1(i1 %Fnx)
	call void @helper_i1(i1 %Gnx)
	call void @helper_i1(i1 %Dnn)
	call void @helper_i1(i1 %Enn)
	call void @helper_i1(i1 %Fnn)
	call void @helper_i1(i1 %Gnn)
	ret void
}

define i1 @constant_fold_inttoptr_null() {
; <label>:0
	%x = icmp eq i32* inttoptr (i64 32 to i32*), null
	ret i1 %x
}

define i1 @constant_fold_null_inttoptr() {
; <label>:0
	%x = icmp eq i32* null, inttoptr (i64 32 to i32*)
	ret i1 %x
}

attributes #0 = { "null-pointer-is-valid"="true" }
