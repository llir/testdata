declare i1 @llvm.isunordered.f32(float, float)

declare i1 @llvm.isunordered.f64(double, double)

declare i8 @llvm.ctpop.i8(i8)

declare i16 @llvm.ctpop.i16(i16)

declare i32 @llvm.ctpop.i32(i32)

declare i64 @llvm.ctpop.i64(i64)

declare i8 @llvm.cttz.i8(i8, i1)

declare i16 @llvm.cttz.i16(i16, i1)

declare i32 @llvm.cttz.i32(i32, i1)

declare i64 @llvm.cttz.i64(i64, i1)

declare i8 @llvm.ctlz.i8(i8, i1)

declare i16 @llvm.ctlz.i16(i16, i1)

declare i32 @llvm.ctlz.i32(i32, i1)

declare i64 @llvm.ctlz.i64(i64, i1)

declare float @llvm.sqrt.f32(float)

declare double @llvm.sqrt.f64(double)

define void @libm() {
; <label>:0
	%1 = fcmp uno float 1.0, 2.0
	%2 = fcmp uno double 3.0, 4.0
	%3 = call float @llvm.sqrt.f32(float 5.0)
	%4 = call double @llvm.sqrt.f64(double 6.0)
	%5 = call i8 @llvm.ctpop.i8(i8 10)
	%6 = call i16 @llvm.ctpop.i16(i16 11)
	%7 = call i32 @llvm.ctpop.i32(i32 12)
	%8 = call i64 @llvm.ctpop.i64(i64 13)
	%9 = call i8 @llvm.ctlz.i8(i8 14, i1 true)
	%10 = call i16 @llvm.ctlz.i16(i16 15, i1 true)
	%11 = call i32 @llvm.ctlz.i32(i32 16, i1 true)
	%12 = call i64 @llvm.ctlz.i64(i64 17, i1 true)
	%13 = call i8 @llvm.cttz.i8(i8 18, i1 true)
	%14 = call i16 @llvm.cttz.i16(i16 19, i1 true)
	%15 = call i32 @llvm.cttz.i32(i32 20, i1 true)
	%16 = call i64 @llvm.cttz.i64(i64 21, i1 true)
	ret void
}

declare void @llvm.trap()

define void @trap() {
; <label>:0
	call void @llvm.trap()
	ret void
}
