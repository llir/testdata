@llvm.fp.env = thread_local global i8 zeroinitializer, section "llvm.metadata"

define double @f1() #0 {
entry:
	%div = call double @llvm.experimental.constrained.fdiv.f64(double 1.0, double 10.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %div
}

define double @f2(double %a) #0 {
entry:
	%div = call double @llvm.experimental.constrained.fsub.f64(double %a, double 0.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %div
}

define double @f3(double %a, double %b) #0 {
entry:
	%sub = call double @llvm.experimental.constrained.fsub.f64(double -0.0, double %a, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	%mul = call double @llvm.experimental.constrained.fmul.f64(double %sub, double %b, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	%ret = call double @llvm.experimental.constrained.fsub.f64(double -0.0, double %mul, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %ret
}

define double @f4(i32 %n, double %a) #0 {
entry:
	%cmp = icmp sgt i32 %n, 0
	br i1 %cmp, label %if.then, label %if.end

if.then:
	%add = call double @llvm.experimental.constrained.fadd.f64(double 1.0, double %a, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	br label %if.end

if.end:
	%a.0 = phi double [ %add, %if.then ], [ %a, %entry ]
	ret double %a.0
}

define double @f5() #0 {
entry:
	%result = call double @llvm.experimental.constrained.sqrt.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f6() #0 {
entry:
	%result = call double @llvm.experimental.constrained.pow.f64(double 0x40450CCCCCCCCCCD, double 3.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f7() #0 {
entry:
	%result = call double @llvm.experimental.constrained.powi.f64(double 0x40450CCCCCCCCCCD, i32 3, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f8() #0 {
entry:
	%result = call double @llvm.experimental.constrained.sin.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f9() #0 {
entry:
	%result = call double @llvm.experimental.constrained.cos.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f10() #0 {
entry:
	%result = call double @llvm.experimental.constrained.exp.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f11() #0 {
entry:
	%result = call double @llvm.experimental.constrained.exp2.f64(double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f12() #0 {
entry:
	%result = call double @llvm.experimental.constrained.log.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f13() #0 {
entry:
	%result = call double @llvm.experimental.constrained.log10.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f14() #0 {
entry:
	%result = call double @llvm.experimental.constrained.log2.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f15() #0 {
entry:
	%result = call double @llvm.experimental.constrained.rint.f64(double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f16() #0 {
entry:
	%result = call double @llvm.experimental.constrained.nearbyint.f64(double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f17() #0 {
entry:
	%result = call double @llvm.experimental.constrained.fma.f64(double 0x40450CCCCCCCCCCD, double 0x40450CCCCCCCCCCD, double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define zeroext i32 @f18() #0 {
entry:
	%result = call zeroext i32 @llvm.experimental.constrained.fptoui.i32.f64(double 0x40450CCCCCCCCCCD, metadata !"fpexcept.strict") #0
	ret i32 %result
}

define i32 @f19() #0 {
entry:
	%result = call i32 @llvm.experimental.constrained.fptosi.i32.f64(double 0x40450CCCCCCCCCCD, metadata !"fpexcept.strict") #0
	ret i32 %result
}

define float @f20() #0 {
entry:
	%result = call float @llvm.experimental.constrained.fptrunc.f32.f64(double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret float %result
}

define double @f21() #0 {
entry:
	%result = call double @llvm.experimental.constrained.fpext.f64.f32(float 42.0, metadata !"fpexcept.strict") #0
	ret double %result
}

define i32 @f22() #0 {
entry:
	%result = call i32 @llvm.experimental.constrained.lrint.i32.f64(double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret i32 %result
}

define i32 @f23() #0 {
entry:
	%result = call i32 @llvm.experimental.constrained.lrint.i32.f32(float 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret i32 %result
}

define i64 @f24() #0 {
entry:
	%result = call i64 @llvm.experimental.constrained.llrint.i64.f64(double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret i64 %result
}

define i64 @f25() #0 {
entry:
	%result = call i64 @llvm.experimental.constrained.llrint.i64.f32(float 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret i64 %result
}

define i32 @f26() #0 {
entry:
	%result = call i32 @llvm.experimental.constrained.lround.i32.f64(double 0x40450CCCCCCCCCCD, metadata !"fpexcept.strict") #0
	ret i32 %result
}

define i32 @f27() #0 {
entry:
	%result = call i32 @llvm.experimental.constrained.lround.i32.f32(float 42.0, metadata !"fpexcept.strict") #0
	ret i32 %result
}

define i64 @f28() #0 {
entry:
	%result = call i64 @llvm.experimental.constrained.llround.i64.f64(double 0x40450CCCCCCCCCCD, metadata !"fpexcept.strict") #0
	ret i64 %result
}

define i64 @f29() #0 {
entry:
	%result = call i64 @llvm.experimental.constrained.llround.i64.f32(float 42.0, metadata !"fpexcept.strict") #0
	ret i64 %result
}

define double @f30() #0 {
entry:
	%result = call double @llvm.experimental.constrained.sitofp.f64.i32(i32 42, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

define double @f31() #0 {
entry:
	%result = call double @llvm.experimental.constrained.uitofp.f64.i32(i32 42, metadata !"round.dynamic", metadata !"fpexcept.strict") #0
	ret double %result
}

declare double @llvm.experimental.constrained.fdiv.f64(double %0, double %1, metadata %2, metadata %3)

declare double @llvm.experimental.constrained.fmul.f64(double %0, double %1, metadata %2, metadata %3)

declare double @llvm.experimental.constrained.fadd.f64(double %0, double %1, metadata %2, metadata %3)

declare double @llvm.experimental.constrained.fsub.f64(double %0, double %1, metadata %2, metadata %3)

declare double @llvm.experimental.constrained.sqrt.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.pow.f64(double %0, double %1, metadata %2, metadata %3)

declare double @llvm.experimental.constrained.powi.f64(double %0, i32 %1, metadata %2, metadata %3)

declare double @llvm.experimental.constrained.sin.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.cos.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.exp.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.exp2.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.log.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.log10.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.log2.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.rint.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.nearbyint.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.fma.f64(double %0, double %1, double %2, metadata %3, metadata %4)

declare i32 @llvm.experimental.constrained.fptosi.i32.f64(double %0, metadata %1)

declare i32 @llvm.experimental.constrained.fptoui.i32.f64(double %0, metadata %1)

declare float @llvm.experimental.constrained.fptrunc.f32.f64(double %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.fpext.f64.f32(float %0, metadata %1)

declare i32 @llvm.experimental.constrained.lrint.i32.f64(double %0, metadata %1, metadata %2)

declare i32 @llvm.experimental.constrained.lrint.i32.f32(float %0, metadata %1, metadata %2)

declare i64 @llvm.experimental.constrained.llrint.i64.f64(double %0, metadata %1, metadata %2)

declare i64 @llvm.experimental.constrained.llrint.i64.f32(float %0, metadata %1, metadata %2)

declare i32 @llvm.experimental.constrained.lround.i32.f64(double %0, metadata %1)

declare i32 @llvm.experimental.constrained.lround.i32.f32(float %0, metadata %1)

declare i64 @llvm.experimental.constrained.llround.i64.f64(double %0, metadata %1)

declare i64 @llvm.experimental.constrained.llround.i64.f32(float %0, metadata %1)

declare double @llvm.experimental.constrained.sitofp.f64.i32(i32 %0, metadata %1, metadata %2)

declare double @llvm.experimental.constrained.uitofp.f64.i32(i32 %0, metadata %1, metadata %2)

attributes #0 = { strictfp }
