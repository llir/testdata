@llvm.fp.env = thread_local global i8 zeroinitializer, section "llvm.metadata"

define double @f1() {
entry:
	%div = call double @llvm.experimental.constrained.fdiv.f64(double 1.0, double 10.0, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %div
}

define double @f2(double %a) {
entry:
	%div = call double @llvm.experimental.constrained.fsub.f64(double %a, double 0.0, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %div
}

define double @f3(double %a, double %b) {
entry:
	%sub = call double @llvm.experimental.constrained.fsub.f64(double -0.0, double %a, metadata !"round.dynamic", metadata !"fpexcept.strict")
	%mul = call double @llvm.experimental.constrained.fmul.f64(double %sub, double %b, metadata !"round.dynamic", metadata !"fpexcept.strict")
	%ret = call double @llvm.experimental.constrained.fsub.f64(double -0.0, double %mul, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %ret
}

define double @f4(i32 %n, double %a) {
entry:
	%cmp = icmp sgt i32 %n, 0
	br i1 %cmp, label %if.then, label %if.end

if.then:
	%add = call double @llvm.experimental.constrained.fadd.f64(double 1.0, double %a, metadata !"round.dynamic", metadata !"fpexcept.strict")
	br label %if.end

if.end:
	%a.0 = phi double [ %add, %if.then ], [ %a, %entry ]
	ret double %a.0
}

define double @f5() {
entry:
	%result = call double @llvm.experimental.constrained.sqrt.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f6() {
entry:
	%result = call double @llvm.experimental.constrained.pow.f64(double 0x40450CCCCCCCCCCD, double 3.0, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f7() {
entry:
	%result = call double @llvm.experimental.constrained.powi.f64(double 0x40450CCCCCCCCCCD, i32 3, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f8() {
entry:
	%result = call double @llvm.experimental.constrained.sin.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f9() {
entry:
	%result = call double @llvm.experimental.constrained.cos.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f10() {
entry:
	%result = call double @llvm.experimental.constrained.exp.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f11() {
entry:
	%result = call double @llvm.experimental.constrained.exp2.f64(double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f12() {
entry:
	%result = call double @llvm.experimental.constrained.log.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f13() {
entry:
	%result = call double @llvm.experimental.constrained.log10.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f14() {
entry:
	%result = call double @llvm.experimental.constrained.log2.f64(double 42.0, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f15() {
entry:
	%result = call double @llvm.experimental.constrained.rint.f64(double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f16() {
entry:
	%result = call double @llvm.experimental.constrained.nearbyint.f64(double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

define double @f17() {
entry:
	%result = call double @llvm.experimental.constrained.fma.f64(double 0x40450CCCCCCCCCCD, double 0x40450CCCCCCCCCCD, double 0x40450CCCCCCCCCCD, metadata !"round.dynamic", metadata !"fpexcept.strict")
	ret double %result
}

declare double @llvm.experimental.constrained.fdiv.f64(double, double, metadata, metadata)

declare double @llvm.experimental.constrained.fmul.f64(double, double, metadata, metadata)

declare double @llvm.experimental.constrained.fadd.f64(double, double, metadata, metadata)

declare double @llvm.experimental.constrained.fsub.f64(double, double, metadata, metadata)

declare double @llvm.experimental.constrained.sqrt.f64(double, metadata, metadata)

declare double @llvm.experimental.constrained.pow.f64(double, double, metadata, metadata)

declare double @llvm.experimental.constrained.powi.f64(double, i32, metadata, metadata)

declare double @llvm.experimental.constrained.sin.f64(double, metadata, metadata)

declare double @llvm.experimental.constrained.cos.f64(double, metadata, metadata)

declare double @llvm.experimental.constrained.exp.f64(double, metadata, metadata)

declare double @llvm.experimental.constrained.exp2.f64(double, metadata, metadata)

declare double @llvm.experimental.constrained.log.f64(double, metadata, metadata)

declare double @llvm.experimental.constrained.log10.f64(double, metadata, metadata)

declare double @llvm.experimental.constrained.log2.f64(double, metadata, metadata)

declare double @llvm.experimental.constrained.rint.f64(double, metadata, metadata)

declare double @llvm.experimental.constrained.nearbyint.f64(double, metadata, metadata)

declare double @llvm.experimental.constrained.fma.f64(double, double, double, metadata, metadata)
