declare i32 @llvm.nvvm.brev32(i32 %0)

declare i64 @llvm.nvvm.brev64(i64 %0)

declare i32 @llvm.nvvm.clz.i(i32 %0)

declare i32 @llvm.nvvm.clz.ll(i64 %0)

declare i32 @llvm.nvvm.popc.i(i32 %0)

declare i32 @llvm.nvvm.popc.ll(i64 %0)

declare float @llvm.nvvm.h2f(i16 %0)

declare i32 @llvm.nvvm.abs.i(i32 %0)

declare i64 @llvm.nvvm.abs.ll(i64 %0)

declare i32 @llvm.nvvm.max.i(i32 %0, i32 %1)

declare i64 @llvm.nvvm.max.ll(i64 %0, i64 %1)

declare i32 @llvm.nvvm.max.ui(i32 %0, i32 %1)

declare i64 @llvm.nvvm.max.ull(i64 %0, i64 %1)

declare i32 @llvm.nvvm.min.i(i32 %0, i32 %1)

declare i64 @llvm.nvvm.min.ll(i64 %0, i64 %1)

declare i32 @llvm.nvvm.min.ui(i32 %0, i32 %1)

declare i64 @llvm.nvvm.min.ull(i64 %0, i64 %1)

define void @simple_upgrade(i32 %a, i64 %b, i16 %c) {
0:
	%r1 = call i32 @llvm.nvvm.brev32(i32 %a)
	%r2 = call i64 @llvm.nvvm.brev64(i64 %b)
	%r3 = call i32 @llvm.nvvm.clz.i(i32 %a)
	%r4 = call i32 @llvm.nvvm.clz.ll(i64 %b)
	%r5 = call i32 @llvm.nvvm.popc.i(i32 %a)
	%r6 = call i32 @llvm.nvvm.popc.ll(i64 %b)
	%r7 = call float @llvm.nvvm.h2f(i16 %c)
	ret void
}

define void @abs(i32 %a, i64 %b) {
0:
	%r1 = call i32 @llvm.nvvm.abs.i(i32 %a)
	%r2 = call i64 @llvm.nvvm.abs.ll(i64 %b)
	ret void
}

define void @min_max(i32 %a1, i32 %a2, i64 %b1, i64 %b2) {
0:
	%r1 = call i32 @llvm.nvvm.max.i(i32 %a1, i32 %a2)
	%r2 = call i64 @llvm.nvvm.max.ll(i64 %b1, i64 %b2)
	%r3 = call i32 @llvm.nvvm.max.ui(i32 %a1, i32 %a2)
	%r4 = call i64 @llvm.nvvm.max.ull(i64 %b1, i64 %b2)
	%r5 = call i32 @llvm.nvvm.min.i(i32 %a1, i32 %a2)
	%r6 = call i64 @llvm.nvvm.min.ll(i64 %b1, i64 %b2)
	%r7 = call i32 @llvm.nvvm.min.ui(i32 %a1, i32 %a2)
	%r8 = call i64 @llvm.nvvm.min.ull(i64 %b1, i64 %b2)
	ret void
}
