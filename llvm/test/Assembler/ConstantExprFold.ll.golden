%Ty = type { i32, i32 }

@A = global i64 0
@add = global i64* inttoptr (i64 add (i64 ptrtoint (i64* @A to i64), i64 0) to i64*)
@sub = global i64* inttoptr (i64 sub (i64 ptrtoint (i64* @A to i64), i64 0) to i64*)
@mul = global i64* inttoptr (i64 mul (i64 ptrtoint (i64* @A to i64), i64 0) to i64*)
@and1 = global i64* inttoptr (i64 and (i64 ptrtoint (i64* @A to i64), i64 0) to i64*)
@and2 = global i64* inttoptr (i64 and (i64 ptrtoint (i64* @A to i64), i64 -1) to i64*)
@or = global i64 or (i64 ptrtoint (i64* @A to i64), i64 -1)
@xor = global i64* inttoptr (i64 xor (i64 ptrtoint (i64* @A to i64), i64 0) to i64*)
@B = external global %Ty
@icmp_ult1 = global i1 icmp ult (i64* @A, i64* getelementptr (i64, i64* @A, i64 1))
@icmp_slt = global i1 icmp slt (i64* @A, i64* getelementptr (i64, i64* @A, i64 0))
@icmp_ult2 = global i1 icmp ult (i32* getelementptr (%Ty, %Ty* @B, i64 0, i32 0), i32* getelementptr (%Ty, %Ty* @B, i64 0, i32 1))
@cons = weak global i32 0, align 8
@and3 = global i64 and (i64 ptrtoint (i32* @cons to i64), i64 7)
@gep1 = global <2 x i8*> getelementptr (i8, <2 x i8*> undef, <2 x i64> <i64 1, i64 1>)
@gep2 = global <2 x i8*> getelementptr ({ i8 }, <2 x { i8 }*> undef, <2 x i64> <i64 1, i64 1>, <2 x i32> <i32 0, i32 0>)
@gep3 = global <2 x i8*> getelementptr (i8, <2 x i8*> zeroinitializer, <2 x i64> <i64 0, i64 0>)
@gep4 = global <2 x i8*> getelementptr ({ i8 }, <2 x { i8 }*> zeroinitializer, <2 x i64> <i64 0, i64 0>, <2 x i32> <i32 0, i32 0>)

define void @dummy() {
0:
	ret void
}
